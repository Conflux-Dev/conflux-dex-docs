{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Conflux DEX is a decentralized exchange infrastructure based on Conflux, which is made up of ShuttleFlow , BoomFlow and MatchFlow . ShuttleFlow is used to transfer assets from Bitcoin or Ethereum to Conflux chain. BoomFlow is set of smart contracts on Conflux chain for user assets management and trade settlement. MatchFlow is an order book based matching engine, which provides REST APIs for users to place/cancel orders.","title":"Welcome to Conflux DEX"},{"location":"boomflow/","text":"Welcome to BoomFlow BoomFlow contains two kinds of smart contracts: CRC-L and Boomflow. CRC-L stands for CRC Lock , it is used to lock user assets and only the authrized user or contract could change the user assets. Now, each asset has a separate CRC-L contract. Boomflow contract is responsible for trade settlement and authrized to change user assets in CRC-L contracts. Now, these contracts are not open sourced yet, and only the Matchflow has authrity to access these contracts. Javascript SDK There are two Javascript SDKs available on npm for frontend and backend respectively. Each SDK enables whitelisted users to call functions in smart contracts directly or interact with Conflux DEX REST APIs to place/cancel orders. boomflow : SDK for backend development. Usually, it uses private key or keyfile to sign messages. boomflow frontend : SDK for frontend development. Usually, it uses Conflux Portal to sign messages.","title":"Introduction"},{"location":"boomflow/#welcome-to-boomflow","text":"BoomFlow contains two kinds of smart contracts: CRC-L and Boomflow. CRC-L stands for CRC Lock , it is used to lock user assets and only the authrized user or contract could change the user assets. Now, each asset has a separate CRC-L contract. Boomflow contract is responsible for trade settlement and authrized to change user assets in CRC-L contracts. Now, these contracts are not open sourced yet, and only the Matchflow has authrity to access these contracts.","title":"Welcome to BoomFlow"},{"location":"boomflow/#javascript-sdk","text":"There are two Javascript SDKs available on npm for frontend and backend respectively. Each SDK enables whitelisted users to call functions in smart contracts directly or interact with Conflux DEX REST APIs to place/cancel orders. boomflow : SDK for backend development. Usually, it uses private key or keyfile to sign messages. boomflow frontend : SDK for frontend development. Usually, it uses Conflux Portal to sign messages.","title":"Javascript SDK"},{"location":"matchflow/","text":"Welcome to MatchFlow MatchFlow provides REST API and WebSocket API to place/cancel orders or query market data. Now, MatchFlow have two environments main net and test net, which are used for real trading and simulated trading respectively. Environments API MAINNET TESTNET COMMENT REST API https://api.matchflow.io https://dev.matchflow.io Document WebSocket API wss://api.matchflow.io/ws wss://dev.matchflow.io/ws Document Note, only whitelisted users could access the APIs of main net. Change Logs 2020/04/17 Add new REST API: get incompleted orders. System Optimization: WebSocket, on-chain settlement. Fix bug in FC smart contract. Auto-pause mechansim in case of on-chain settlement exception. 2020/04/09 Server migrate to Tokyo region. System optimization. 2020/03/26 New features Transfer in Conflux DEX REST API changes New added Transfer List transfer records Updated Place order: add fee related fields 2020/03/11 New features Daily limit REST API changes New added Get daily limit of product Get daily limit rate of product Get last closing price of product Updated Currency: add ERC777 contract address 2020/03/06 New features Instant exchange REST API changes New added Get Boomflow address Updated Withdraw: add timestamp field Place order: add timestamp field Cancel order: add timestamp field Cancel order by client order ID: add timestamp field Get user: nonce removed Removed Batch cancel orders User login/logout","title":"Introduction"},{"location":"matchflow/#welcome-to-matchflow","text":"MatchFlow provides REST API and WebSocket API to place/cancel orders or query market data. Now, MatchFlow have two environments main net and test net, which are used for real trading and simulated trading respectively.","title":"Welcome to MatchFlow"},{"location":"matchflow/#environments","text":"API MAINNET TESTNET COMMENT REST API https://api.matchflow.io https://dev.matchflow.io Document WebSocket API wss://api.matchflow.io/ws wss://dev.matchflow.io/ws Document Note, only whitelisted users could access the APIs of main net.","title":"Environments"},{"location":"matchflow/#change-logs","text":"","title":"Change Logs"},{"location":"matchflow/#20200417","text":"Add new REST API: get incompleted orders. System Optimization: WebSocket, on-chain settlement. Fix bug in FC smart contract. Auto-pause mechansim in case of on-chain settlement exception.","title":"2020/04/17"},{"location":"matchflow/#20200409","text":"Server migrate to Tokyo region. System optimization.","title":"2020/04/09"},{"location":"matchflow/#20200326","text":"New features Transfer in Conflux DEX REST API changes New added Transfer List transfer records Updated Place order: add fee related fields","title":"2020/03/26"},{"location":"matchflow/#20200311","text":"New features Daily limit REST API changes New added Get daily limit of product Get daily limit rate of product Get last closing price of product Updated Currency: add ERC777 contract address","title":"2020/03/11"},{"location":"matchflow/#20200306","text":"New features Instant exchange REST API changes New added Get Boomflow address Updated Withdraw: add timestamp field Place order: add timestamp field Cancel order: add timestamp field Cancel order by client order ID: add timestamp field Get user: nonce removed Removed Batch cancel orders User login/logout","title":"2020/03/06"},{"location":"matchflow/eip712/","text":"Why EIP712 To avoid transaction replay attack in different Conflux chains, Conflux DEX follow the way of EIP712 to sign requests from users, which will be validated in MatchFlow and BoomFlow . General Values in HEX format have 0x prefix. Some values (e.g. amount , price ) are BigDecimal or double types, and need to convert to big number in drip format when interact with blockchain. Basically, the formula is: big number = decimal * 10^18 . EIP712 Domain Primary type: EIP712Domain Boomflow Domain NAME TYPE VALUE name string Boomflow version string 1.0 chainId uint256 Retrieve from Conflux RPC server verifyingContract address REST API: /common/boomflow CRCL Domain NAME TYPE VALUE name string CRCL version string 1.0 chainId uint256 Retrieve from Conflux RPC server verifyingContract address REST API: /currencies/${name} In the response of REST API /currencies/${name} , use contractAddress as CRCL contract address, while tokenAddress is the corresponding ERC777 contract address. chainId is 0 by default, however, client should always retrieve it from Conflux RPC server. E.g. call getStatus to get chain ID in Javascript program. Place Order Domain: Boomflow Domain Primary type: Order Schema NAME TYPE VALUE userAddress address HEX format amount uint256 big number in drip price uint256 big number in drip orderType uint256 limit order: 0, market order: 1 side bool buy order: true, sell order: false salt uint256 order timestamp baseAssetAddress address HEX format quoteAssetAddress address HEX format feeAddress address HEX format makerFeePercentage uint256 big number in drip takerFeePercentage uint256 big number in drip Cancel Order Domain: Boomflow Domain Primary type: CancelRequest Schema NAME TYPE VALUE order order schema placed order nonce uint256 order cancellation timestamp Withdraw Domain: CRCL Domain Primary type: WithdrawRequest Schema NAME TYPE VALUE userAddress address HEX format amount uint256 big number in drip recipient address HEX format isCrosschain bool nonce uint256 withdraw timestamp Transfer Domain: CRCL Domain Primary type: TransferRequest Schema NAME TYPE VALUE userAddress address HEX format amounts uint256[] big number in drip recipients address[] HEX format nonce uint256 transfer timestamp","title":"EIP712 Signature"},{"location":"matchflow/eip712/#why-eip712","text":"To avoid transaction replay attack in different Conflux chains, Conflux DEX follow the way of EIP712 to sign requests from users, which will be validated in MatchFlow and BoomFlow .","title":"Why EIP712"},{"location":"matchflow/eip712/#general","text":"Values in HEX format have 0x prefix. Some values (e.g. amount , price ) are BigDecimal or double types, and need to convert to big number in drip format when interact with blockchain. Basically, the formula is: big number = decimal * 10^18 .","title":"General"},{"location":"matchflow/eip712/#eip712-domain","text":"Primary type: EIP712Domain","title":"EIP712 Domain"},{"location":"matchflow/eip712/#boomflow-domain","text":"NAME TYPE VALUE name string Boomflow version string 1.0 chainId uint256 Retrieve from Conflux RPC server verifyingContract address REST API: /common/boomflow","title":"Boomflow Domain"},{"location":"matchflow/eip712/#crcl-domain","text":"NAME TYPE VALUE name string CRCL version string 1.0 chainId uint256 Retrieve from Conflux RPC server verifyingContract address REST API: /currencies/${name} In the response of REST API /currencies/${name} , use contractAddress as CRCL contract address, while tokenAddress is the corresponding ERC777 contract address. chainId is 0 by default, however, client should always retrieve it from Conflux RPC server. E.g. call getStatus to get chain ID in Javascript program.","title":"CRCL Domain"},{"location":"matchflow/eip712/#place-order","text":"Domain: Boomflow Domain Primary type: Order","title":"Place Order"},{"location":"matchflow/eip712/#schema","text":"NAME TYPE VALUE userAddress address HEX format amount uint256 big number in drip price uint256 big number in drip orderType uint256 limit order: 0, market order: 1 side bool buy order: true, sell order: false salt uint256 order timestamp baseAssetAddress address HEX format quoteAssetAddress address HEX format feeAddress address HEX format makerFeePercentage uint256 big number in drip takerFeePercentage uint256 big number in drip","title":"Schema"},{"location":"matchflow/eip712/#cancel-order","text":"Domain: Boomflow Domain Primary type: CancelRequest","title":"Cancel Order"},{"location":"matchflow/eip712/#schema_1","text":"NAME TYPE VALUE order order schema placed order nonce uint256 order cancellation timestamp","title":"Schema"},{"location":"matchflow/eip712/#withdraw","text":"Domain: CRCL Domain Primary type: WithdrawRequest","title":"Withdraw"},{"location":"matchflow/eip712/#schema_2","text":"NAME TYPE VALUE userAddress address HEX format amount uint256 big number in drip recipient address HEX format isCrosschain bool nonce uint256 withdraw timestamp","title":"Schema"},{"location":"matchflow/eip712/#transfer","text":"Domain: CRCL Domain Primary type: TransferRequest","title":"Transfer"},{"location":"matchflow/eip712/#schema_3","text":"NAME TYPE VALUE userAddress address HEX format amounts uint256[] big number in drip recipients address[] HEX format nonce uint256 transfer timestamp","title":"Schema"},{"location":"matchflow/frontend/","text":"If you want to develop a decentralized exchange (DEX) on Conflux chain, MatchFlow is a good choice for you to quickly get start. Why MatchFlow MatchFlow provides APIs to place/cancel orders and query market data. Therefore, you need only to develop a mobile app or web page, and integrates with MatchFlow REST API and WebSocket API . Besides, MatchFlow API allow to set specific trade fee rate/recipient, app could earn trade fee from every order matching. Migrate from CEX MatchFlow provides standard REST and WebSocket APIs following popular centralized exchanges. Any centralized exchange app or web page could easily migrate to Conflux DEX. The only difference between decentralized exchange (DEX) and centralized exchange (DEX) is that Conflux DEX do not requires username/password based login. Instead, Conflux DEX requires user signature to validate authority when user want to place or cancel orders. EIP712 Signature Some REST APIs requires user signature to change user assets: Place order Cancel order Withdraw Transfer Conflux DEX follow the way of EIP712 to validate signed messages, any app based on MatchFlow is required to follow the type schema to sign messages. boomflow frontend SDK is the recommended SDK to interact with MatchFlow for signature required REST APIs.","title":"Frontend Integration"},{"location":"matchflow/frontend/#why-matchflow","text":"MatchFlow provides APIs to place/cancel orders and query market data. Therefore, you need only to develop a mobile app or web page, and integrates with MatchFlow REST API and WebSocket API . Besides, MatchFlow API allow to set specific trade fee rate/recipient, app could earn trade fee from every order matching.","title":"Why MatchFlow"},{"location":"matchflow/frontend/#migrate-from-cex","text":"MatchFlow provides standard REST and WebSocket APIs following popular centralized exchanges. Any centralized exchange app or web page could easily migrate to Conflux DEX. The only difference between decentralized exchange (DEX) and centralized exchange (DEX) is that Conflux DEX do not requires username/password based login. Instead, Conflux DEX requires user signature to validate authority when user want to place or cancel orders.","title":"Migrate from CEX"},{"location":"matchflow/frontend/#eip712-signature","text":"Some REST APIs requires user signature to change user assets: Place order Cancel order Withdraw Transfer Conflux DEX follow the way of EIP712 to validate signed messages, any app based on MatchFlow is required to follow the type schema to sign messages. boomflow frontend SDK is the recommended SDK to interact with MatchFlow for signature required REST APIs.","title":"EIP712 Signature"},{"location":"matchflow/market_maker/","text":"A market maker can easily interact with MatchFlow via REST API and WebSocket API . Firstly, please refer to the document to add a new account in Conflux DEX. After that, market maker could call REST APIs to place orders or cancel orders . Unlike centralized exchanges, Conflux DEX requires EIP712 based user signature to place an order. Accordingly, market maker need to follow the type schema to sign place/cancel order request.","title":"Market Maker"},{"location":"matchflow/reg_user/","text":"Unlike the centralized exchange, Conflux DEX do not require user to register an account via REST API in MatchFlow. Because, Conflux DEX is a decentralized exchange and user assets are all locked in smart contracts on Conflux chain. User need to interact with CRC-L contract for user registration in Conflux DEX. Add User When user deposit assets into CRC-L contracts, MatchFlow listens and polls the deposit event data once the deposit transaction executed and confirmed on Conflux chain. After that, MatchFlow will add or update the account balance in off-chain ledger (database). Generally, the transaction confirmation time on Conflux chain is no more than one minute, so user will be able to place orders after one minute of deposit. API The recommended way to deposit assets is using boomflow frontend SDK , and the available asset list could be retrieved from MatchFlow REST API getCurrencies . Each asset has two contract addresses: contractAddress : asset CRC-L contract address, which is used for DEX only. tokenAddress : asset ERC777 token contract address, which is used for any dapps. With boomflow frontend SDK, user assets could be easily depsoited from ERC777 contract to CRC-L contract.","title":"User Registration"},{"location":"matchflow/reg_user/#add-user","text":"When user deposit assets into CRC-L contracts, MatchFlow listens and polls the deposit event data once the deposit transaction executed and confirmed on Conflux chain. After that, MatchFlow will add or update the account balance in off-chain ledger (database). Generally, the transaction confirmation time on Conflux chain is no more than one minute, so user will be able to place orders after one minute of deposit.","title":"Add User"},{"location":"matchflow/reg_user/#api","text":"The recommended way to deposit assets is using boomflow frontend SDK , and the available asset list could be retrieved from MatchFlow REST API getCurrencies . Each asset has two contract addresses: contractAddress : asset CRC-L contract address, which is used for DEX only. tokenAddress : asset ERC777 token contract address, which is used for any dapps. With boomflow frontend SDK, user assets could be easily depsoited from ERC777 contract to CRC-L contract.","title":"API"},{"location":"matchflow/ws/","text":"MatchFlow WebSocket API MatchFlow WebSocket API provides pub/sub way to monitor the market data and user data, including orders, trades and balance changes. General Websocket URL ws://${conflux_dex_url}/ws Heartbeat and Connection Websocket server will send PING heartbeat message periodically (20 seconds) with an integer number. When client receives the heartbeat message, it should response with a matching PONG message which has the same integer number. Websocket server will disconnect clients if there is no communication message (inclues PING message) in 30 seconds. On the other hand, Websocket server will periodically (20 seconds) disconnect clients if no topic subscribed. Subscribe to Topic To subscribe a topic, please send below message to Websocket server: { \"topic\": \"topic name\", \"sub\": true, \"arguments\": {} } The arguments is used to specify additional parameters to subscribe a topic, e.g. specify user address to subscribe Asset or Order related topics. Unsubscribe To unsubscribe, please send below message to Websocket server: { \"topic\": \"topic name\", \"sub\": false } Topic Response Websocket server push messages of different topics in the same format as below: { \"topic\": \"topic name\", \"timestamp\": 1582609926336, \"data\": {} } As for the data value, please refer to the Update Content that defined for each topic. Market Data Best Bid/Offer Topic market.$product.bbo Update Content public class BestBidOffer { /** * Product name. */ private String product; /** * Quote timestamp. */ private Instant quoteTime; /** * Best bid price. */ private BigDecimal bid; /** * Best bid amount. */ private BigDecimal bidAmount; /** * Best bid order count. */ private int bidCount; /** * Best ask price. */ private BigDecimal ask; /** * Best ask amount. */ private BigDecimal askAmount; /** * Best ask order count. */ private int askCount; } Market Depth Topic market.$product.depth.$step $step : market depth aggregation level, including \"step0\", \"step1\", \"step2\", \"step3\", \"step4\" and \"step5\". For \"step0\", market depth data supports up to 150 levels. For others, market depth data supports up to 20 levels. Update Content { \"Buy\": [{}], \"Sell\": [{}] } public class DepthPriceLevel { /** * Order price. */ private BigDecimal price; /** * Total amount in all orders. */ private BigDecimal amount; /** * Total number of all orders. */ private int count; } Market Details in Last 24 Hours Topic market.$product.detail Update Content public class Tick implements Cloneable { /** * Tick id. (auto-generated) */ private long id; /** * Referenced product id. */ private int productId; /** * Tick granularity in minutes. */ private int granularity; /** * Tick open value. */ private BigDecimal open; /** * Tick high value. */ private BigDecimal high; /** * Tick low value. */ private BigDecimal low; /** * Tick close value. */ private BigDecimal close; /** * Total volume of base currency. */ private BigDecimal baseCurrencyVolume; /** * Total volume of quote currency. */ private BigDecimal quoteCurrencyVolume; /** * Total number of trades. */ private int count; /** * Tick creation timestamp. */ private Timestamp createTime; /** * Last update timestamp. */ private Timestamp updateTime; } Market Tick Topic market.$product.tick.$granularity $granularity : tick granularity, including 1min, 5min, 15min, 30min, 60min, 1day, 1week and 1month. Update Content public class Tick implements Cloneable { /** * Tick id. (auto-generated) */ private long id; /** * Referenced product id. */ private int productId; /** * Tick granularity in minutes. */ private int granularity; /** * Tick open value. */ private BigDecimal open; /** * Tick high value. */ private BigDecimal high; /** * Tick low value. */ private BigDecimal low; /** * Tick close value. */ private BigDecimal close; /** * Total volume of base currency. */ private BigDecimal baseCurrencyVolume; /** * Total volume of quote currency. */ private BigDecimal quoteCurrencyVolume; /** * Total number of trades. */ private int count; /** * Tick creation timestamp. */ private Timestamp createTime; /** * Last update timestamp. */ private Timestamp updateTime; } Trade Detail Topic market.$product.trade.detail Update Content public class Trade { /** * Trade id. (auto-generated) */ private long id; /** * Referenced product id. */ private int productId; /** * Referenced taker order id. */ private long takerOrderId; /** * Referenced maker order id. */ private long makerOrderId; /** * Trade price from maker order. */ private BigDecimal price; /** * Trade amount. */ private BigDecimal amount; /** * Taker order side: \"Buy\", \"Sell\". */ private OrderSide side; /** * Trade fee of taker side. * For \"Buy\" order, it is base currency. * For \"Sell\" order, it is quote currency. */ private BigDecimal takerFee; /** * Trade fee of maker side. * For \"Buy\" order, it is base currency. * For \"Sell\" order, it is quote currency. */ private BigDecimal makerFee; /** * Settlement status: \"OffChainSettled\", \"OnChainSettled\", \"OnChainConfirmed\". */ private SettlementStatus status = SettlementStatus.OffChainSettled; /** * Transaction hash of settlement on blockchain. */ private String txHash; /** * Transaction nonce of settlement on blockchain. */ private long txNonce; /** * Create timestamp. */ private Timestamp createTime = Timestamp.from(Instant.now()); /** * Update timestamp. */ private Timestamp updateTime = this.createTime; } Asset and Order Account Updates Topic accounts Arguments address : user address. model : trigger mode in integer type. 0: Only update when account balance changed; 1: Update when either account balance changed or available balance changed. Update Content public class BalanceChange { /** * Balance change type, including \"OrderPlace\", \"OrderMatch\", \"OrderCancel\", * \"Deposit\", \"Withdraw\" and \"Transfer\". */ private BalanceChangeType type; /** * The account id of the changed balance. */ private long accountId; /** * The currency name of the changed balance. */ private String currency; /** * Account balance (only exists when account balance changed). */ private BigDecimal balance; /** * Available balance (only exists when available balance changed). */ private BigDecimal available; /** * Change time, unix timestamp in milliseconds. */ private long changeTime; } Order Updates Topic order.$product $product : product name or * for all products. Arguments address : user address. Update Content public class OrderChange { /** * Changed order ID. */ private long id; /** * Optional client defined order identity, which is unique for a user. */ private String clientOrderId; /** * Product ID of the changed order. */ private int productId; /** * Order type: \"Limit\", \"Market\". */ private OrderType type; /** * Order side: \"Buy\", \"Sell\". */ private OrderSide side; /** * Order status: \"New\", \"Open\", \"Cancelling\", \"Cancelled\", \"Filled\". */ private OrderStatus status; /** * Order price for \"Limit\" order type only. */ private BigDecimal price; /** * Order amount for \"Limit\" order type or \"Market-Sell\" order. * For \"Market-Buy\" order, it is the total order value. */ private BigDecimal amount; /** * For order matched event, it indicates whether it is a taker order. * For order status changed event, it is true by default. */ private boolean taker; /** * Trade price (only exists for order matched event). */ private BigDecimal tradePrice; /** * Trade amount (only exists for order matched event). */ private BigDecimal tradeAmount; /** * Trade fee (only exists for order matched event). * * For taker order trade, it is calculated by taker fee rate. * For maker order trade, it is calculated by maker fee rate. * * For \"Buy\" order trade, it is base currency. * For \"Sell\" order trade, it is quote currency. */ private BigDecimal tradeFee; /** * Filled amount of base currency. */ private BigDecimal filledAmount; /** * Filled funds of quote currency. */ private BigDecimal filledFunds; } Trade Details Topic trade.$product $product : product name or * for all products. Arguments address : user address. Update Content public class UserTrade { /** * Trade ID. */ private long id; /** * Product ID. */ private int productId; /** * Order ID. */ private long orderId; /** * Order type: \"Limit\", \"Market\". */ private OrderType orderType; /** * Order side: \"Buy\", \"Sell\". */ private OrderSide orderSide; /** * Trade price from maker order. */ private BigDecimal tradePrice; /** * Trade amount. */ private BigDecimal tradeAmount; /** * Trade fee. * * For taker order trade, it is calculated by taker fee rate. * For maker order trade, it is calculated by maker fee rate. * * For \"Buy\" order trade, it is base currency. * For \"Sell\" order trade, it is quote currency. */ private BigDecimal tradeFee; /** * Whether the trade is from taker order. */ private boolean taker; /** * Trade time, unix timestamp in milliseconds. */ private long tradeTime; }","title":"WebSocket API"},{"location":"matchflow/ws/#matchflow-websocket-api","text":"MatchFlow WebSocket API provides pub/sub way to monitor the market data and user data, including orders, trades and balance changes.","title":"MatchFlow WebSocket API"},{"location":"matchflow/ws/#general","text":"","title":"General"},{"location":"matchflow/ws/#websocket-url","text":"ws://${conflux_dex_url}/ws","title":"Websocket URL"},{"location":"matchflow/ws/#heartbeat-and-connection","text":"Websocket server will send PING heartbeat message periodically (20 seconds) with an integer number. When client receives the heartbeat message, it should response with a matching PONG message which has the same integer number. Websocket server will disconnect clients if there is no communication message (inclues PING message) in 30 seconds. On the other hand, Websocket server will periodically (20 seconds) disconnect clients if no topic subscribed.","title":"Heartbeat and Connection"},{"location":"matchflow/ws/#subscribe-to-topic","text":"To subscribe a topic, please send below message to Websocket server: { \"topic\": \"topic name\", \"sub\": true, \"arguments\": {} } The arguments is used to specify additional parameters to subscribe a topic, e.g. specify user address to subscribe Asset or Order related topics.","title":"Subscribe to Topic"},{"location":"matchflow/ws/#unsubscribe","text":"To unsubscribe, please send below message to Websocket server: { \"topic\": \"topic name\", \"sub\": false }","title":"Unsubscribe"},{"location":"matchflow/ws/#topic-response","text":"Websocket server push messages of different topics in the same format as below: { \"topic\": \"topic name\", \"timestamp\": 1582609926336, \"data\": {} } As for the data value, please refer to the Update Content that defined for each topic.","title":"Topic Response"},{"location":"matchflow/ws/#market-data","text":"","title":"Market Data"},{"location":"matchflow/ws/#best-bidoffer","text":"","title":"Best Bid/Offer"},{"location":"matchflow/ws/#topic","text":"market.$product.bbo","title":"Topic"},{"location":"matchflow/ws/#update-content","text":"public class BestBidOffer { /** * Product name. */ private String product; /** * Quote timestamp. */ private Instant quoteTime; /** * Best bid price. */ private BigDecimal bid; /** * Best bid amount. */ private BigDecimal bidAmount; /** * Best bid order count. */ private int bidCount; /** * Best ask price. */ private BigDecimal ask; /** * Best ask amount. */ private BigDecimal askAmount; /** * Best ask order count. */ private int askCount; }","title":"Update Content"},{"location":"matchflow/ws/#market-depth","text":"","title":"Market Depth"},{"location":"matchflow/ws/#topic_1","text":"market.$product.depth.$step $step : market depth aggregation level, including \"step0\", \"step1\", \"step2\", \"step3\", \"step4\" and \"step5\". For \"step0\", market depth data supports up to 150 levels. For others, market depth data supports up to 20 levels.","title":"Topic"},{"location":"matchflow/ws/#update-content_1","text":"{ \"Buy\": [{}], \"Sell\": [{}] } public class DepthPriceLevel { /** * Order price. */ private BigDecimal price; /** * Total amount in all orders. */ private BigDecimal amount; /** * Total number of all orders. */ private int count; }","title":"Update Content"},{"location":"matchflow/ws/#market-details-in-last-24-hours","text":"","title":"Market Details in Last 24 Hours"},{"location":"matchflow/ws/#topic_2","text":"market.$product.detail","title":"Topic"},{"location":"matchflow/ws/#update-content_2","text":"public class Tick implements Cloneable { /** * Tick id. (auto-generated) */ private long id; /** * Referenced product id. */ private int productId; /** * Tick granularity in minutes. */ private int granularity; /** * Tick open value. */ private BigDecimal open; /** * Tick high value. */ private BigDecimal high; /** * Tick low value. */ private BigDecimal low; /** * Tick close value. */ private BigDecimal close; /** * Total volume of base currency. */ private BigDecimal baseCurrencyVolume; /** * Total volume of quote currency. */ private BigDecimal quoteCurrencyVolume; /** * Total number of trades. */ private int count; /** * Tick creation timestamp. */ private Timestamp createTime; /** * Last update timestamp. */ private Timestamp updateTime; }","title":"Update Content"},{"location":"matchflow/ws/#market-tick","text":"","title":"Market Tick"},{"location":"matchflow/ws/#topic_3","text":"market.$product.tick.$granularity $granularity : tick granularity, including 1min, 5min, 15min, 30min, 60min, 1day, 1week and 1month.","title":"Topic"},{"location":"matchflow/ws/#update-content_3","text":"public class Tick implements Cloneable { /** * Tick id. (auto-generated) */ private long id; /** * Referenced product id. */ private int productId; /** * Tick granularity in minutes. */ private int granularity; /** * Tick open value. */ private BigDecimal open; /** * Tick high value. */ private BigDecimal high; /** * Tick low value. */ private BigDecimal low; /** * Tick close value. */ private BigDecimal close; /** * Total volume of base currency. */ private BigDecimal baseCurrencyVolume; /** * Total volume of quote currency. */ private BigDecimal quoteCurrencyVolume; /** * Total number of trades. */ private int count; /** * Tick creation timestamp. */ private Timestamp createTime; /** * Last update timestamp. */ private Timestamp updateTime; }","title":"Update Content"},{"location":"matchflow/ws/#trade-detail","text":"","title":"Trade Detail"},{"location":"matchflow/ws/#topic_4","text":"market.$product.trade.detail","title":"Topic"},{"location":"matchflow/ws/#update-content_4","text":"public class Trade { /** * Trade id. (auto-generated) */ private long id; /** * Referenced product id. */ private int productId; /** * Referenced taker order id. */ private long takerOrderId; /** * Referenced maker order id. */ private long makerOrderId; /** * Trade price from maker order. */ private BigDecimal price; /** * Trade amount. */ private BigDecimal amount; /** * Taker order side: \"Buy\", \"Sell\". */ private OrderSide side; /** * Trade fee of taker side. * For \"Buy\" order, it is base currency. * For \"Sell\" order, it is quote currency. */ private BigDecimal takerFee; /** * Trade fee of maker side. * For \"Buy\" order, it is base currency. * For \"Sell\" order, it is quote currency. */ private BigDecimal makerFee; /** * Settlement status: \"OffChainSettled\", \"OnChainSettled\", \"OnChainConfirmed\". */ private SettlementStatus status = SettlementStatus.OffChainSettled; /** * Transaction hash of settlement on blockchain. */ private String txHash; /** * Transaction nonce of settlement on blockchain. */ private long txNonce; /** * Create timestamp. */ private Timestamp createTime = Timestamp.from(Instant.now()); /** * Update timestamp. */ private Timestamp updateTime = this.createTime; }","title":"Update Content"},{"location":"matchflow/ws/#asset-and-order","text":"","title":"Asset and Order"},{"location":"matchflow/ws/#account-updates","text":"","title":"Account Updates"},{"location":"matchflow/ws/#topic_5","text":"accounts","title":"Topic"},{"location":"matchflow/ws/#arguments","text":"address : user address. model : trigger mode in integer type. 0: Only update when account balance changed; 1: Update when either account balance changed or available balance changed.","title":"Arguments"},{"location":"matchflow/ws/#update-content_5","text":"public class BalanceChange { /** * Balance change type, including \"OrderPlace\", \"OrderMatch\", \"OrderCancel\", * \"Deposit\", \"Withdraw\" and \"Transfer\". */ private BalanceChangeType type; /** * The account id of the changed balance. */ private long accountId; /** * The currency name of the changed balance. */ private String currency; /** * Account balance (only exists when account balance changed). */ private BigDecimal balance; /** * Available balance (only exists when available balance changed). */ private BigDecimal available; /** * Change time, unix timestamp in milliseconds. */ private long changeTime; }","title":"Update Content"},{"location":"matchflow/ws/#order-updates","text":"","title":"Order Updates"},{"location":"matchflow/ws/#topic_6","text":"order.$product $product : product name or * for all products.","title":"Topic"},{"location":"matchflow/ws/#arguments_1","text":"address : user address.","title":"Arguments"},{"location":"matchflow/ws/#update-content_6","text":"public class OrderChange { /** * Changed order ID. */ private long id; /** * Optional client defined order identity, which is unique for a user. */ private String clientOrderId; /** * Product ID of the changed order. */ private int productId; /** * Order type: \"Limit\", \"Market\". */ private OrderType type; /** * Order side: \"Buy\", \"Sell\". */ private OrderSide side; /** * Order status: \"New\", \"Open\", \"Cancelling\", \"Cancelled\", \"Filled\". */ private OrderStatus status; /** * Order price for \"Limit\" order type only. */ private BigDecimal price; /** * Order amount for \"Limit\" order type or \"Market-Sell\" order. * For \"Market-Buy\" order, it is the total order value. */ private BigDecimal amount; /** * For order matched event, it indicates whether it is a taker order. * For order status changed event, it is true by default. */ private boolean taker; /** * Trade price (only exists for order matched event). */ private BigDecimal tradePrice; /** * Trade amount (only exists for order matched event). */ private BigDecimal tradeAmount; /** * Trade fee (only exists for order matched event). * * For taker order trade, it is calculated by taker fee rate. * For maker order trade, it is calculated by maker fee rate. * * For \"Buy\" order trade, it is base currency. * For \"Sell\" order trade, it is quote currency. */ private BigDecimal tradeFee; /** * Filled amount of base currency. */ private BigDecimal filledAmount; /** * Filled funds of quote currency. */ private BigDecimal filledFunds; }","title":"Update Content"},{"location":"matchflow/ws/#trade-details","text":"","title":"Trade Details"},{"location":"matchflow/ws/#topic_7","text":"trade.$product $product : product name or * for all products.","title":"Topic"},{"location":"matchflow/ws/#arguments_2","text":"address : user address.","title":"Arguments"},{"location":"matchflow/ws/#update-content_7","text":"public class UserTrade { /** * Trade ID. */ private long id; /** * Product ID. */ private int productId; /** * Order ID. */ private long orderId; /** * Order type: \"Limit\", \"Market\". */ private OrderType orderType; /** * Order side: \"Buy\", \"Sell\". */ private OrderSide orderSide; /** * Trade price from maker order. */ private BigDecimal tradePrice; /** * Trade amount. */ private BigDecimal tradeAmount; /** * Trade fee. * * For taker order trade, it is calculated by taker fee rate. * For maker order trade, it is calculated by maker fee rate. * * For \"Buy\" order trade, it is base currency. * For \"Sell\" order trade, it is quote currency. */ private BigDecimal tradeFee; /** * Whether the trade is from taker order. */ private boolean taker; /** * Trade time, unix timestamp in milliseconds. */ private long tradeTime; }","title":"Update Content"},{"location":"shuttleflow/","text":"Conflux Shuttleflow Documentation Shuttleflow is Conflux cross chain solution to integrate user assets from bitcoin and ethereum. Currently it is used to help user migrate assets from other blockchain to conlux and trade in Conflux Dex. Terminologies cToken(Conflux Token): An ERC777 token on conflux backed 1:1 by tokens from other blockchain. e.g. 1 cBTC is backed by 1 bitcoin. User: The people who want to transfer assets from other blockchain to Conflux using shuttleflow. Custodian Alliance: A group of factory or institutions who have the authorities to mint and burn cToken. Payment Wallet: For a conflux address X , there is a corresponding smart contract P on ethereum which is the payment wallet for X . If someone transferred A ETH to C , the custodian alliance will mint A cETH for X . On bitcoin, the payment wallet is a special multi-sig wallet. Custodian Hot Wallet: The multisig wallets of custodian alliance, which hold the users assets from other blockchain (the assets transferred to payment wallets). Custodian Cold Wallet: The multisig wallets of custodian alliance which is not connected to internet. Custodian Node: Custodian service run independently by each custodian member, which monitor the blockchain data and process user's mint/burn operations automatically. Architecture The workflow for a end user who want to use shuttleflow, they just need 3 steps: 1. Get the payment wallet address. 2. Transfer assets(BTC/ETH/USDT) to payment wallet. 3. Check balance in Conflux DEX after custodian alliance processed and trade in Conflux DEX. The detail operations between step 2 and 3 is demonstrated in the right part of the architecture: 1. Custodian alliance monitor the transactions/contract events on bitcoin/ethereum, discover the user payment and wait for it confirming. 2. For a confirmed user payment, the custodian alliance will retrieve the assets in user's payment wallet to custodian hot wallet, and mint corresponding cToken for user. This is made by custodian nodes run by custodian alliance automatically. 3. At this point, the minted cToken will be then automatically locked in the Conflux DEX and user can do trade. This rest document is organized as in the following sections: * Shuttleflow Contracts * Custodian Node * JSON RPC * Conflux Cross Chain SDK","title":"Introduction"},{"location":"shuttleflow/#conflux-shuttleflow-documentation","text":"Shuttleflow is Conflux cross chain solution to integrate user assets from bitcoin and ethereum. Currently it is used to help user migrate assets from other blockchain to conlux and trade in Conflux Dex.","title":"Conflux Shuttleflow Documentation"},{"location":"shuttleflow/#terminologies","text":"cToken(Conflux Token): An ERC777 token on conflux backed 1:1 by tokens from other blockchain. e.g. 1 cBTC is backed by 1 bitcoin. User: The people who want to transfer assets from other blockchain to Conflux using shuttleflow. Custodian Alliance: A group of factory or institutions who have the authorities to mint and burn cToken. Payment Wallet: For a conflux address X , there is a corresponding smart contract P on ethereum which is the payment wallet for X . If someone transferred A ETH to C , the custodian alliance will mint A cETH for X . On bitcoin, the payment wallet is a special multi-sig wallet. Custodian Hot Wallet: The multisig wallets of custodian alliance, which hold the users assets from other blockchain (the assets transferred to payment wallets). Custodian Cold Wallet: The multisig wallets of custodian alliance which is not connected to internet. Custodian Node: Custodian service run independently by each custodian member, which monitor the blockchain data and process user's mint/burn operations automatically.","title":"Terminologies"},{"location":"shuttleflow/#architecture","text":"The workflow for a end user who want to use shuttleflow, they just need 3 steps: 1. Get the payment wallet address. 2. Transfer assets(BTC/ETH/USDT) to payment wallet. 3. Check balance in Conflux DEX after custodian alliance processed and trade in Conflux DEX. The detail operations between step 2 and 3 is demonstrated in the right part of the architecture: 1. Custodian alliance monitor the transactions/contract events on bitcoin/ethereum, discover the user payment and wait for it confirming. 2. For a confirmed user payment, the custodian alliance will retrieve the assets in user's payment wallet to custodian hot wallet, and mint corresponding cToken for user. This is made by custodian nodes run by custodian alliance automatically. 3. At this point, the minted cToken will be then automatically locked in the Conflux DEX and user can do trade. This rest document is organized as in the following sections: * Shuttleflow Contracts * Custodian Node * JSON RPC * Conflux Cross Chain SDK","title":"Architecture"},{"location":"shuttleflow/custodian/","text":"Custodian Node Each member of custodian alliance need to run a custodian node, all custodian nodes form a p2p network. Design Goals The custodian node have following design goals: Monitor conflux, ethereum smart contract events and bitcoin transactions to synchronize user requests and custodian operations, e.g. mint, burn. Collect signatures from other custodian nodes in p2p network, automatically send transactions on different blockchain to process user request or custodian operations when over 2/3 signatures are collected. Since the custodian alliance share one hot multi-signature wallet for bitcoin and ethereum, different custodian node should be consistent in the way to process an request, e.g., pick the same utxos of bitcoin hot wallet for a user withdraw request. All communications with other custodian nodes should be validated. Components Design and Implementation Configuration A custodian node should be configured with the private keys and other information of a custodian member, see README for detail. P2P Network All custodian nodes broadcast messages in a gossip p2p network with following configurations: Name Description p2p_throttle_duration p2p message throttle time window duration p2p_throttle_max maximum number of message from a socket in one time window fanout fan-out of p2p network Connection Authentication All new connection to a p2p server of custodian node will be authenticated. The request header of any new connection must has following three fields: timestamp utc timestamp when clients try to connect to server signer conflux address of a custodian member signature the signature of a custodian member for a message which is the concatenation of server host ip and timestamp On the server side, the signature is checked and the connection is authenticated if the timestamp is larger than any successful connections of signer before, which ensure the signature of same timestamp cannot be reused. RPC Custodian node provides multiple RPC for the frontend to display process of user operation and custodian alliance status. See JSON-RPC part of README . Message Authentication All incoming messages from other custodian node will be authenticated in two steps: The whole message should be signed by a current custodian member with its conflux private key. Furthermore, for different type of user operations, this ensure the message is sent by a custodian member. Each message contains the parameters of a specific operation, the hash of the operation and signature of hash of a valid custodian member. The custodian node who received this message will first compute the operation hash with the operation parameters in the message and check if it is equal to the hash provided in the message, then validate the signature of hash. The operation hash here will also be checked in the smart contract of Shuttleflow when an operation is settled on chain. Since custodian member can change, if the message from a peer is signed by address which is not member of current custodian alliance, the connection will be dropped. User Payment Wallet Ethereum Payment Wallet The ethereum payment wallet for user is a smart contract on ethereum chain, which is used to receive eth and erc20 token from user. Each user has a unique payment wallet contract. When user transfer eth or erc20 token to the payment wallet contract, the custodian alliance will mint corresponding cToken and CRC-L token for user. Bitcoin Payment Wallet The bitcoin payment wallet for user is a special multi-sig wallet with following bitcoin script(scriptPubKey): ${user_conflux_address} OP_DROP ${M} ${public_key_1} ${public_key_2} ... ${public_key_N} ${N} OP_CHECKMULTISIG ```` where `${N}` is the total number of custodian members, `${M}` denotes the required minimum number of signatures from different custodian members, `${public_key_i}` is the public key of i-th custodian member. Any one want to spend the utxo with the scriptPubKey above need to provide a scriptSig: OP_0 ${signature_1} ${signature_2} ... ${signature_M} ``` Blockchain Monitoring Custodian node will monitor the contract events emitted by Shuttleflow smart contract and bitcoin transaction to user payment wallet. This table shows the contract event monitored by custodian node: Contract Event Description CustodianCore MemberChange Custodian membership changed CustodianCore BtcHotToCold New transfer operation from bitcoin hot wallet to cold wallet TokenBase Minted User mint operation finished TokenBase Burnt New user withdraw operation EthFactory BurnSuccess User ETH withdraw operation finished EthFactory BurnSuccessERC20 User ERC20 withdraw operation finished EthFactory WalletTransfer An operation using cold private key finished EthFactory shareProfitETH Transferred profit(ETH) to a custodian member EthFactory shareProfitERC20 Transferred profit(ERC20) to a custodian member EthFactory HotToCold Transfer from hot wallet to cold wallet finished EthFactory HotToColdDetail Detail of a specific token of a HotToCold operation ERC20(e.g. USDT) Transfer User pay to the payment wallet, new mint operation For bitcoin, since there is no smart contract and event, the operation params will be stored in OP_RETURN of any transaction sent from custodian alliance, the custodian monitor the bitcoin transactions to update local operation status.","title":"Custodian Node"},{"location":"shuttleflow/custodian/#custodian-node","text":"Each member of custodian alliance need to run a custodian node, all custodian nodes form a p2p network.","title":"Custodian Node"},{"location":"shuttleflow/custodian/#design-goals","text":"The custodian node have following design goals: Monitor conflux, ethereum smart contract events and bitcoin transactions to synchronize user requests and custodian operations, e.g. mint, burn. Collect signatures from other custodian nodes in p2p network, automatically send transactions on different blockchain to process user request or custodian operations when over 2/3 signatures are collected. Since the custodian alliance share one hot multi-signature wallet for bitcoin and ethereum, different custodian node should be consistent in the way to process an request, e.g., pick the same utxos of bitcoin hot wallet for a user withdraw request. All communications with other custodian nodes should be validated.","title":"Design Goals"},{"location":"shuttleflow/custodian/#components-design-and-implementation","text":"","title":"Components Design and Implementation"},{"location":"shuttleflow/custodian/#configuration","text":"A custodian node should be configured with the private keys and other information of a custodian member, see README for detail.","title":"Configuration"},{"location":"shuttleflow/custodian/#p2p-network","text":"All custodian nodes broadcast messages in a gossip p2p network with following configurations: Name Description p2p_throttle_duration p2p message throttle time window duration p2p_throttle_max maximum number of message from a socket in one time window fanout fan-out of p2p network","title":"P2P Network"},{"location":"shuttleflow/custodian/#connection-authentication","text":"All new connection to a p2p server of custodian node will be authenticated. The request header of any new connection must has following three fields: timestamp utc timestamp when clients try to connect to server signer conflux address of a custodian member signature the signature of a custodian member for a message which is the concatenation of server host ip and timestamp On the server side, the signature is checked and the connection is authenticated if the timestamp is larger than any successful connections of signer before, which ensure the signature of same timestamp cannot be reused.","title":"Connection Authentication"},{"location":"shuttleflow/custodian/#rpc","text":"Custodian node provides multiple RPC for the frontend to display process of user operation and custodian alliance status. See JSON-RPC part of README .","title":"RPC"},{"location":"shuttleflow/custodian/#message-authentication","text":"All incoming messages from other custodian node will be authenticated in two steps: The whole message should be signed by a current custodian member with its conflux private key. Furthermore, for different type of user operations, this ensure the message is sent by a custodian member. Each message contains the parameters of a specific operation, the hash of the operation and signature of hash of a valid custodian member. The custodian node who received this message will first compute the operation hash with the operation parameters in the message and check if it is equal to the hash provided in the message, then validate the signature of hash. The operation hash here will also be checked in the smart contract of Shuttleflow when an operation is settled on chain. Since custodian member can change, if the message from a peer is signed by address which is not member of current custodian alliance, the connection will be dropped.","title":"Message Authentication"},{"location":"shuttleflow/custodian/#user-payment-wallet","text":"","title":"User Payment Wallet"},{"location":"shuttleflow/custodian/#ethereum-payment-wallet","text":"The ethereum payment wallet for user is a smart contract on ethereum chain, which is used to receive eth and erc20 token from user. Each user has a unique payment wallet contract. When user transfer eth or erc20 token to the payment wallet contract, the custodian alliance will mint corresponding cToken and CRC-L token for user.","title":"Ethereum Payment Wallet"},{"location":"shuttleflow/custodian/#bitcoin-payment-wallet","text":"The bitcoin payment wallet for user is a special multi-sig wallet with following bitcoin script(scriptPubKey): ${user_conflux_address} OP_DROP ${M} ${public_key_1} ${public_key_2} ... ${public_key_N} ${N} OP_CHECKMULTISIG ```` where `${N}` is the total number of custodian members, `${M}` denotes the required minimum number of signatures from different custodian members, `${public_key_i}` is the public key of i-th custodian member. Any one want to spend the utxo with the scriptPubKey above need to provide a scriptSig: OP_0 ${signature_1} ${signature_2} ... ${signature_M} ```","title":"Bitcoin Payment Wallet"},{"location":"shuttleflow/custodian/#blockchain-monitoring","text":"Custodian node will monitor the contract events emitted by Shuttleflow smart contract and bitcoin transaction to user payment wallet. This table shows the contract event monitored by custodian node: Contract Event Description CustodianCore MemberChange Custodian membership changed CustodianCore BtcHotToCold New transfer operation from bitcoin hot wallet to cold wallet TokenBase Minted User mint operation finished TokenBase Burnt New user withdraw operation EthFactory BurnSuccess User ETH withdraw operation finished EthFactory BurnSuccessERC20 User ERC20 withdraw operation finished EthFactory WalletTransfer An operation using cold private key finished EthFactory shareProfitETH Transferred profit(ETH) to a custodian member EthFactory shareProfitERC20 Transferred profit(ERC20) to a custodian member EthFactory HotToCold Transfer from hot wallet to cold wallet finished EthFactory HotToColdDetail Detail of a specific token of a HotToCold operation ERC20(e.g. USDT) Transfer User pay to the payment wallet, new mint operation For bitcoin, since there is no smart contract and event, the operation params will be stored in OP_RETURN of any transaction sent from custodian alliance, the custodian monitor the bitcoin transactions to update local operation status.","title":"Blockchain Monitoring"},{"location":"shuttleflow/json_rpc/","text":"JSON-RPC Methods getHotWalletBalance Get the hot wallet balance of specified token. Parameters (1) token: (string) Returns String Example $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getHotWalletBalance\",\"params\":[\"btc\"],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": 0.00281705 } getColdWalletBalance Get the cold wallet balance of specified token. Parameters (1) token: (string) Returns String Example $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getColdWalletBalance\",\"params\":[\"btc\"],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": 0 } getProfitWalletBalance Get the profit wallet balance of specified token. Parameters (1) token: (string) Returns Number Example $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getProfitWalletBalance\",\"params\":[\"eth\"],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": \"0\" } getWalletAddress Get the wallet address url for different token. Parameters None. Returns JSON object:\\ {\\ token_name: (JSON object)\\ {\\ \"hot_wallet\": (String) url of wallet,\\ \"cold_wallet\": (String) url of wallet,\\ \"profit_wallet\": (String) url of wallet,\\ \"personal_wallet\": (String) url of wallet,\\ }\\ } Example $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getWalletAddress\",\"params\":[],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"btc\": { \"hot_wallet\": \"https://blockstream.info/testnet/address/2MsPJwNqdeUHvxM3munWBxtCE2WncF9PKbZ\", \"cold_wallet\": \"https://blockstream.info/testnet/address/2N5d2CVouyjaF8thM9anTTcJFyHvhF2AdRS\", \"profit_wallet\": \"https://blockstream.info/testnet/address/2N9rEmrpFA1b7HKZiDghnNEmTy6MDrgV3aC\", \"personal_wallet\": \"https://blockstream.info/testnet/address/mhMHPARYGwa4gki9bjtyZnSWAX7ApfjhuR\" }, \"eth\": { \"hot_wallet_address\": \"https://rinkeby.etherscan.io/address/0x81632943BA6395d5E998393343e2Bb47c9f8Aa18\", \"cold_wallet_address\": \"https://rinkeby.etherscan.io/address/0x81632943BA6395d5E998393343e2Bb47c9f8Aa18\", \"profit_wallet_address\": \"https://rinkeby.etherscan.io/address/0x81632943BA6395d5E998393343e2Bb47c9f8Aa18\", \"personal_address\": \"https://rinkeby.etherscan.io/address/0x6B6C3A1eC5C689C3dd158b1a6E8Bc722373a2BfA\" }, \"usdt\": { \"hot_wallet_address\": \"https://rinkeby.etherscan.io/token/0xd5185bF8E6F0706aBED0a4025bA4969197c8166B?a=0x81632943BA6395d5E998393343e2Bb47c9f8Aa18\", \"cold_wallet_address\": \"https://rinkeby.etherscan.io/token/0xd5185bF8E6F0706aBED0a4025bA4969197c8166B?a=0x81632943BA6395d5E998393343e2Bb47c9f8Aa18\", \"profit_wallet_address\": \"https://rinkeby.etherscan.io/token/0xd5185bF8E6F0706aBED0a4025bA4969197c8166B?a=0x81632943BA6395d5E998393343e2Bb47c9f8Aa18\", \"personal_address\": \"https://rinkeby.etherscan.io/token/0xd5185bF8E6F0706aBED0a4025bA4969197c8166B?a=0x6B6C3A1eC5C689C3dd158b1a6E8Bc722373a2BfA\" } } } verifyBalance verify the balance of a specified token. Parameters (1) token: (string) Returns JSON object:\\ {\\ hot: (string) hot wallet balance,\\ cold: (string) cold wallet balance,\\ total: (string) cToken total supply,\\ success: (bool) verification result,\\ } Example $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"verifyBalance\",\"params\":[\"btc\"],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"hot\": \"0\", \"cold\": \"0.0203324\", \"total\": \"0.005\", \"success\": false } } getColdTransferHashBtc Get the hash of bitcoin operation which need private key of cold wallet. Parameters (1) type: (string), \"ColdToHot\"|\"ColdTransfer\"|\"ProfitTransfer\"|\"SplitProfit\",\\ (2) amount: (string | number), Optional (only \"ColdToHot\" | \"SplitProfit\") Returns JSON object:\\ {\\ digest:(array of array of string) hash of each utxos used to sign,\\ hash:(string) internal transaction hash, } Example $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getColdTransferHashBtc\",\"params\":[\"ColdToHot\",\"100000\"],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"hash\": \"c051866e922c9d0eee16b075791fc71076c55b0e7c7da2f03cebc41ff3f234e0#1\", \"digests\": [ [\"7d6b239bab77e06a7814e07653ce0b746b559a101f4958dccd5cab0e8801c00c\"] ] } } $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getColdTransferHashBtc\",\"params\":[\"SplitProfit\",\"100000\"],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"hash\": \"SplitProfit@2N9rEmrpFA1b7HKZiDghnNEmTy6MDrgV3aC@@0x186a0#1\", \"digests\": [ [\"298b25483820fddf35a3930422690f8a5053fb3ffa9ec660627a39ed78bec3d7\"] ] } } getColdTransferHashEth Get the hash of eth/erc20 token operation which need private key of cold wallet. Parameters (1) type: (string), \"ColdToHot\"|\"SplitProfit\",\\ (2) token: (string)\\ (3) amount: (string | number) Returns JSON object:\\ {\\ token:(string),\\ amount:(string),\\ nonce:(string), operation nonce, \\ hash:(string), internal transaction hash,\\ } Example $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getColdTransferHashEth\",\"params\":[\"ColdToHot\",\"eth\",\"100000\"],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"token\": \"eth\", \"amount\": \"0x186a0\", \"nonce\": \"0\", \"hash\": \"0xecf1cd87d27cbd0785da88625b7c414ed1954fd8abb3a427f295537152fdeed2\" } } signColdTransferBtc sign the bitcoin transfer cold wallet to another address request. Parameters (1) type:(string) \"ColdToHot\"|\"ColdTransfer\"|\"ProfitTransfer\"|\"SplitProfit\",\\ (2) amount: (string | number), Optional (only \"ColdToHot\" | \"SplitProfit\"),\\ (3) hash:(string) internal transaction hash to sign\\ (4) signatures:(array of array of string) signature of each utxos used (5) signer:(string) signer's public key Returns \"sign successfully\" | Error Message (string) Example $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"signColdTransferBtc\",\"params\":[\"ColdToHot\",\"100000\",\"c051866e922c9d0eee16b075791fc71076c55b0e7c7da2f03cebc41ff3f234e0#1\",[[\"7d6b239bab77e06a7814e07653ce0b746b559a101f4958dccd5cab0e8801c00c\"]]],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": \"sign successfully\" } $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"signColdTransferBtc\",\"params\":[\"SplitProfit\",\"100000\",\"SplitProfit@2N9rEmrpFA1b7HKZiDghnNEmTy6MDrgV3aC@@0x186a0#1\",[[\"304402202c645b25cc329d2b8adb82c7ee0aca60e28e132bc8ac500efd18aa5229b9531b02201a4972bda60aeaddd489d0774d3b2648a3384c2767dbb6ee1a395941e241909301\"]]],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": \"sign successfully\" } signColdTransferEth sign the ethereum or erc20 token transfer cold wallet to another address request. Parameters (1) type: (string), \"ColdToHot\"|\"SplitProfit\",\\ (2) token:(string) token name or erc20 or eth,\\ (3) amount:(string),\\ (4) nonce:(string), operation nonce,\\ (5) hash:(string), internal transaction hash,\\ (6) signature:(string), signature of hash (7) signer:(string), signer's public key Returns \"sign successfully\" | Error Message (string) Example $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"signColdTransferEth\",\"params\":[\"ColdToHot\",\"eth\",\"100000\",\"0\",\"0xecf1cd87d27cbd0785da88625b7c414ed1954fd8abb3a427f295537152fdeed2\",\"0x6df962201a0372d415d79ef6b8cfde457ea2f6a352651f0b189c6d114615a4cb6a9c298fe36b9954bc55a6e42295a8c6720a0aec0d4d85b0c82db1d6e10d1c741b\"],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": \"sign successfully\" } getMemberChangeInfo Get last member change information. Parameters None. Returns JSON object:\\ {\\ info:(JSON object) Member change detail:\\ {\\ epoch:(Number),\\ changes:(array of JSON object) [{,\\ member:(string),\\ operation:(string) \"add\" | \"remove\",\\ }...]\\ }\\ address_change:(JSON object) bitcoin address change detail:\\ {\\ last_hot_address:(string),\\ last_cold_address:(string),\\ last_profit_address:(string),\\ hot_address:(string),\\ cold_address:(string),\\ profit_address:(string),\\ }\\ } Example $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getMemberChangeInfo\",\"params\":[],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"info\": { \"epoch\": 200924, \"changes\": [{ \"member\": \"0x81f3521d71990945B99e1C592750D7157F2b544f\", \"operation\": \"remove\" }, { \"member\": \"0x65CF2b2c91e6eff901F10ab7363ae58cf1bfCCc5\", \"operation\": \"remove\" }, { \"member\": \"0x81f3521d71990945b99e1c592750d7157f2b544f\", \"operation\": \"add\" }, { \"member\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"operation\": \"add\" }, { \"member\": \"0x2338f8646aeaa5a32d374fae49ee7aae6bca1efc\", \"operation\": \"add\" }] }, \"address_change\": { \"last_hot_address\": \"2MsPJwNqdeUHvxM3munWBxtCE2WncF9PKbZ\", \"last_cold_address\": \"2N5d2CVouyjaF8thM9anTTcJFyHvhF2AdRS\", \"last_profit_address\": \"2N9rEmrpFA1b7HKZiDghnNEmTy6MDrgV3aC\", \"cold_address\": \"2MyP3jysyz1GTeD6VHPZ6Wqs5SkNc2VkNBb\", \"profit_address\": \"2N7tUaxmwq9rwtXZUYymiYXnn9s7Vd2hMZp\", \"hot_address\": \"2N7UpxpCo6gEpPdjksZPPE9GjTq8JY1KQpz\" } } } getHotColdWalletTransferList Get wallet transfer operations list between hot and cold wallet. Parameters (1) skip:(Number) the number of leading operations to be ignored\\ (2) count:(Number) the maximum number of operations to return Returns Example JSON object:\\ {\\ txs: (Array of JSON objects) transactions in requested range\\ [\\ For doing request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ need:(Number) total number of signatures needed,\\ signer:(array of string) list of members who have signed,\\ has_signed:(bool) whether current member has signed or not,\\ status:(string) \"doing\",\\ },\\ For finished request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ status:(string) \"finished\",\\ }...]\\ total: (Number) total number of transactions,\\ } Example $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getHotColdWalletTransferList\",\"params\":[0,100],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"txs\": [{ \"type\": \"eth_ColdToHot\", \"nonce_or_txid\": \"0\", \"amount\": \"100000\", \"user_addr\": \"\", \"addr\": \"\", \"signer\": [\"0x6B6C3A1eC5C689C3dd158b1a6E8Bc722373a2BfA\"], \"has_signed\": true, \"need\": 2, \"status\": \"doing\" }, { \"type\": \"eth_HotToCold\", \"nonce_or_txid\": \"0\", \"user_addr\": \"\", \"addr\": \"\", \"status\": \"finished\" }], \"total\": 2 } } getProfitSplitList Get profit split operations list. Parameters (1) skip:(Number) the number of leading operations to be ignored\\ (2) count:(Number) the maximum number of operations to return Returns JSON object:\\ {\\ txs: (Array of JSON objects) transactions in requested range\\ [\\ For doing request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ need:(Number) total number of signatures needed,\\ signer:(array of string) list of members who have signed,\\ has_signed:(bool) whether current member has signed or not,\\ status:(string) \"doing\",\\ },\\ For finished request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ status:(string) \"finished\",\\ }...]\\ total: (Number) total number of transactions,\\ } Example $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getProfitSplitList\",\"params\":[0,100],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"txs\": [{ \"type\": \"eth_SplitProfit\", \"nonce_or_txid\": \"1\", \"amount\": \"100\", \"user_addr\": \"\", \"addr\": \"\", \"status\": \"finished\" }], \"total\": 1 } } getUserOperationList Get user mint/burn operations list. Parameters (1) skip:(Number) the number of leading operations to be ignored\\ (2) count:(Number) the maximum number of operations to return Returns JSON object:\\ {\\ txs: (Array of JSON objects) transactions in requested range\\ [\\ For doing request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ need:(Number) total number of signatures needed,\\ signer:(array of string) list of members who have signed,\\ has_signed:(bool) whether current member has signed or not,\\ status:(string) \"doing\",\\ },\\ For finished request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ status:(string) \"finished\",\\ }...]\\ total: (Number) total number of transactions,\\ } Example $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getUserOperationList\",\"params\":[0,100],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"txs\": [{ \"type\": \"eth_mint\", \"nonce_or_txid\": \"0x0002a128139692f866b6a1615ce2c40ad337796fc0ca6e51cc7eb6e30baab760\", \"amount\": \"1000000000000000\", \"user_addr\": \"0x65CF2b2c91e6eff901F10ab7363ae58cf1bfCCc5\", \"to_addr\": \"0x65CF2b2c91e6eff901F10ab7363ae58cf1bfCCc5\", \"signer\": [\"fafa\"], \"has_signed\": true, \"need\": 2, \"status\": \"doing\" }, { \"type\": \"btc_mint\", \"nonce_or_txid\": \"ab68b057429271ac11a860002264c77e074d1125e3ee30d865e5276a488fad90\", \"amount\": \"100000\", \"user_addr\": \"0x81f3521d71990945b99e1c592750d7157f2b544f\", \"to_addr\": \"0x81f3521d71990945b99e1c592750d7157f2b544f\", \"status\": \"finished\" }, { \"type\": \"eth_mint\", \"nonce_or_txid\": \"0xe06818b9da4feef5cd590bd68aa23f13e29ef49354ecdd1ae18b11074bf47478\", \"amount\": \"1000000000000000\", \"user_addr\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"to_addr\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"status\": \"finished\" }, { \"type\": \"cUSDT_mint\", \"nonce_or_txid\": \"0xf1685c53cf641b330d580e9a38f783d1ad875250ffae49d182d7189c9de7907e\", \"amount\": \"100000\", \"user_addr\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"to_addr\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"status\": \"finished\" }, { \"type\": \"withdraw\", \"nonce_or_txid\": \"af6e2107fe26a54f84f234941db111afea9de9c9d1caa4d18778fcf22fe12247\", \"amount\": \"100000\", \"user_addr\": \"\", \"to_addr\": \"\", \"status\": \"finished\" }], \"total\": 5 } } getSpecificUserOperationList Get user mint/burn operations list of specific user. Parameters (1) data:(JSON Object) the query detail\\ (2) skip:(Number) the number of leading operations to be ignored\\ (3) count:(Number) the maximum number of operations to return Returns JSON object:\\ {\\ txs: (Array of JSON objects) transactions in requested range\\ [\\ For doing request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ need:(Number) total number of signatures needed,\\ signer:(array of string) list of members who have signed,\\ has_signed:(bool) whether current member has signed or not,\\ status:(string) \"doing\",\\ },\\ For finished request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ status:(string) \"finished\",\\ }...]\\ total: (Number) total number of transactions,\\ } Example $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getSpecificUserOperationList\",\"params\":[{\"address\":\"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\",\"status\":[\"doing\",\"finished\"],\"types\":[\"eth_mint\",\"erc20_mint\"]},0,100],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"txs\": [{ \"type\": \"eth_mint\", \"nonce_or_txid\": \"0xe06818b9da4feef5cd590bd68aa23f13e29ef49354ecdd1ae18b11074bf47478\", \"amount\": \"1000000000000000\", \"user_addr\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"to_addr\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"status\": \"finished\" }, { \"type\": \"eth_mint\", \"nonce_or_txid\": \"0x0002a128139692f866b6a1615ce2c40ad337796fc0ca6e51cc7eb6e30baab760\", \"amount\": \"1000000000000000\", \"user_addr\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"to_addr\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"status\": \"finished\" }], \"total\": 2 } } getWalletTransferList Get wallet transfer operation list during custodian member changing. Parameters (1) skip:(Number) the number of leading operations to be ignored\\ (2) count:(Number) the maximum number of operations to return Returns JSON object:\\ {\\ txs: (Array of JSON objects) transactions in requested range\\ [\\ For doing request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ need:(Number) total number of signatures needed,\\ signer:(array of string) list of members who have signed,\\ has_signed:(bool) whether current member has signed or not,\\ status:(string) \"doing\",\\ },\\ For finished request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ status:(string) \"finished\",\\ }...]\\ total: (Number) total number of transactions,\\ } Example $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getWalletTransferList\",\"params\":[0,100],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"txs\": [{ \"type\": \"ProfitTransfer\", \"nonce_or_txid\": \"3\", \"amount\": \"NaN\", \"user_addr\": \"2N9rEmrpFA1b7HKZiDghnNEmTy6MDrgV3aC\", \"to_addr\": \"2N7tUaxmwq9rwtXZUYymiYXnn9s7Vd2hMZp\", \"status\": \"finished\" }, { \"type\": \"HotTransfer\", \"nonce_or_txid\": \"ab68b057429271ac11a860002264c77e074d1125e3ee30d865e5276a488fad90\", \"amount\": \"60000\", \"user_addr\": \"2MsPJwNqdeUHvxM3munWBxtCE2WncF9PKbZ\", \"to_addr\": \"2N7UpxpCo6gEpPdjksZPPE9GjTq8JY1KQpz\", \"status\": \"finished\" }], \"total\": 2 } } getCustodianInfo Get information of custodian members. Parameters None. Returns JSON objects:\\ {\\ custodians:(Array of JSON objects):\\ [{\\ name:(string),\\ keys:(JSON object) keys of custodian member,\\ join_epoch:(Number) epoch the member joined the custodian,\\ sig_cnt:(string) times of multi-signature the member participated in,\\ }, ...],\\ op_cnt:(Number) total number of multi-signature operations,\\ } Example $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getCustodianInfo\",\"params\":[],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"custodians\": [{ \"name\": \"fafa\", \"keys\": { \"cfx_hot\": \"0x81f3521d71990945b99e1c592750d7157f2b544f\", \"cfx_cold\": \"0x81f3521d71990945b99e1c592750d7157f2b544f\", \"eth_hot\": \"0x6B6C3A1eC5C689C3dd158b1a6E8Bc722373a2BfA\", \"eth_cold\": \"0x6B6C3A1eC5C689C3dd158b1a6E8Bc722373a2BfA\", \"btc_hot\": \"021a72579a46e91c11cc01f8e072c4a4eedfc477bfc8f2925e02ec006420b4cfc8\", \"btc_cold\": \"039802c21509fdcec599680c04a7e93234a954997184aeccaf96006fe8c3c68b74\" }, \"join_epoch\": 1578246, \"sig_cnt\": 5 }, { \"name\": \"ppd\", \"keys\": { \"cfx_hot\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"cfx_cold\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"eth_hot\": \"0x578Dd2BFc41bb66e9f0ae0802C613996440C9597\", \"eth_cold\": \"0x578Dd2BFc41bb66e9f0ae0802C613996440C9597\", \"btc_hot\": \"02af37a0dbdb234f8f522b8980c9100b4a9cc989be54a09354a12f4122a7e2b87c\", \"btc_cold\": \"03919638867f7e32c58d902a7b95ccfe1bfd928fc44544e0414be99f6addcee790\" }, \"join_epoch\": 1578246, \"sig_cnt\": 5 }, { \"name\": \"autumn\", \"keys\": { \"cfx_hot\": \"0x2338f8646aeaa5a32d374fae49ee7aae6bca1efc\", \"cfx_cold\": \"0x2338f8646aeaa5a32d374fae49ee7aae6bca1efc\", \"eth_hot\": \"0xF0D8ABE44f98F198F1DB255A7833F27a28774D35\", \"eth_cold\": \"0xF0D8ABE44f98F198F1DB255A7833F27a28774D35\", \"btc_hot\": \"028ff2d81abce71ab8b910f4b604b976907f7310cf8970093f09bb7726f14d7534\", \"btc_cold\": \"028ff2d81abce71ab8b910f4b604b976907f7310cf8970093f09bb7726f14d7534\" }, \"join_epoch\": 1579865, \"sig_cnt\": 0 }], \"op_cnt\": 18 } } getBounds Get bounds of tokens. Parameters None. Returns JSON object Example $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getBounds\",\"params\":[],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.21.174:8001 { \"eth\": { \"lower_bound\": \"0\", \"upper_bound\": \"10000000000000000\" }, \"btc\": { \"lower_bound\": \"0\", \"upper_bound\": \"10000000000\" }, \"usdt\": { \"lower_bound\": \"0\", \"upper_bound\": \"10000000000000000\" } }","title":"JSON RPC"},{"location":"shuttleflow/json_rpc/#json-rpc-methods","text":"","title":"JSON-RPC Methods"},{"location":"shuttleflow/json_rpc/#gethotwalletbalance","text":"Get the hot wallet balance of specified token.","title":"getHotWalletBalance"},{"location":"shuttleflow/json_rpc/#parameters","text":"(1) token: (string)","title":"Parameters"},{"location":"shuttleflow/json_rpc/#returns","text":"String","title":"Returns"},{"location":"shuttleflow/json_rpc/#example","text":"$ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getHotWalletBalance\",\"params\":[\"btc\"],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": 0.00281705 }","title":"Example"},{"location":"shuttleflow/json_rpc/#getcoldwalletbalance","text":"Get the cold wallet balance of specified token.","title":"getColdWalletBalance"},{"location":"shuttleflow/json_rpc/#parameters_1","text":"(1) token: (string)","title":"Parameters"},{"location":"shuttleflow/json_rpc/#returns_1","text":"String","title":"Returns"},{"location":"shuttleflow/json_rpc/#example_1","text":"$ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getColdWalletBalance\",\"params\":[\"btc\"],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": 0 }","title":"Example"},{"location":"shuttleflow/json_rpc/#getprofitwalletbalance","text":"Get the profit wallet balance of specified token.","title":"getProfitWalletBalance"},{"location":"shuttleflow/json_rpc/#parameters_2","text":"(1) token: (string)","title":"Parameters"},{"location":"shuttleflow/json_rpc/#returns_2","text":"Number","title":"Returns"},{"location":"shuttleflow/json_rpc/#example_2","text":"$ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getProfitWalletBalance\",\"params\":[\"eth\"],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": \"0\" }","title":"Example"},{"location":"shuttleflow/json_rpc/#getwalletaddress","text":"Get the wallet address url for different token.","title":"getWalletAddress"},{"location":"shuttleflow/json_rpc/#parameters_3","text":"None.","title":"Parameters"},{"location":"shuttleflow/json_rpc/#returns_3","text":"JSON object:\\ {\\ token_name: (JSON object)\\ {\\ \"hot_wallet\": (String) url of wallet,\\ \"cold_wallet\": (String) url of wallet,\\ \"profit_wallet\": (String) url of wallet,\\ \"personal_wallet\": (String) url of wallet,\\ }\\ }","title":"Returns"},{"location":"shuttleflow/json_rpc/#example_3","text":"$ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getWalletAddress\",\"params\":[],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"btc\": { \"hot_wallet\": \"https://blockstream.info/testnet/address/2MsPJwNqdeUHvxM3munWBxtCE2WncF9PKbZ\", \"cold_wallet\": \"https://blockstream.info/testnet/address/2N5d2CVouyjaF8thM9anTTcJFyHvhF2AdRS\", \"profit_wallet\": \"https://blockstream.info/testnet/address/2N9rEmrpFA1b7HKZiDghnNEmTy6MDrgV3aC\", \"personal_wallet\": \"https://blockstream.info/testnet/address/mhMHPARYGwa4gki9bjtyZnSWAX7ApfjhuR\" }, \"eth\": { \"hot_wallet_address\": \"https://rinkeby.etherscan.io/address/0x81632943BA6395d5E998393343e2Bb47c9f8Aa18\", \"cold_wallet_address\": \"https://rinkeby.etherscan.io/address/0x81632943BA6395d5E998393343e2Bb47c9f8Aa18\", \"profit_wallet_address\": \"https://rinkeby.etherscan.io/address/0x81632943BA6395d5E998393343e2Bb47c9f8Aa18\", \"personal_address\": \"https://rinkeby.etherscan.io/address/0x6B6C3A1eC5C689C3dd158b1a6E8Bc722373a2BfA\" }, \"usdt\": { \"hot_wallet_address\": \"https://rinkeby.etherscan.io/token/0xd5185bF8E6F0706aBED0a4025bA4969197c8166B?a=0x81632943BA6395d5E998393343e2Bb47c9f8Aa18\", \"cold_wallet_address\": \"https://rinkeby.etherscan.io/token/0xd5185bF8E6F0706aBED0a4025bA4969197c8166B?a=0x81632943BA6395d5E998393343e2Bb47c9f8Aa18\", \"profit_wallet_address\": \"https://rinkeby.etherscan.io/token/0xd5185bF8E6F0706aBED0a4025bA4969197c8166B?a=0x81632943BA6395d5E998393343e2Bb47c9f8Aa18\", \"personal_address\": \"https://rinkeby.etherscan.io/token/0xd5185bF8E6F0706aBED0a4025bA4969197c8166B?a=0x6B6C3A1eC5C689C3dd158b1a6E8Bc722373a2BfA\" } } }","title":"Example"},{"location":"shuttleflow/json_rpc/#verifybalance","text":"verify the balance of a specified token.","title":"verifyBalance"},{"location":"shuttleflow/json_rpc/#parameters_4","text":"(1) token: (string)","title":"Parameters"},{"location":"shuttleflow/json_rpc/#returns_4","text":"JSON object:\\ {\\ hot: (string) hot wallet balance,\\ cold: (string) cold wallet balance,\\ total: (string) cToken total supply,\\ success: (bool) verification result,\\ }","title":"Returns"},{"location":"shuttleflow/json_rpc/#example_4","text":"$ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"verifyBalance\",\"params\":[\"btc\"],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"hot\": \"0\", \"cold\": \"0.0203324\", \"total\": \"0.005\", \"success\": false } }","title":"Example"},{"location":"shuttleflow/json_rpc/#getcoldtransferhashbtc","text":"Get the hash of bitcoin operation which need private key of cold wallet.","title":"getColdTransferHashBtc"},{"location":"shuttleflow/json_rpc/#parameters_5","text":"(1) type: (string), \"ColdToHot\"|\"ColdTransfer\"|\"ProfitTransfer\"|\"SplitProfit\",\\ (2) amount: (string | number), Optional (only \"ColdToHot\" | \"SplitProfit\")","title":"Parameters"},{"location":"shuttleflow/json_rpc/#returns_5","text":"JSON object:\\ {\\ digest:(array of array of string) hash of each utxos used to sign,\\ hash:(string) internal transaction hash, }","title":"Returns"},{"location":"shuttleflow/json_rpc/#example_5","text":"$ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getColdTransferHashBtc\",\"params\":[\"ColdToHot\",\"100000\"],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"hash\": \"c051866e922c9d0eee16b075791fc71076c55b0e7c7da2f03cebc41ff3f234e0#1\", \"digests\": [ [\"7d6b239bab77e06a7814e07653ce0b746b559a101f4958dccd5cab0e8801c00c\"] ] } } $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getColdTransferHashBtc\",\"params\":[\"SplitProfit\",\"100000\"],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"hash\": \"SplitProfit@2N9rEmrpFA1b7HKZiDghnNEmTy6MDrgV3aC@@0x186a0#1\", \"digests\": [ [\"298b25483820fddf35a3930422690f8a5053fb3ffa9ec660627a39ed78bec3d7\"] ] } }","title":"Example"},{"location":"shuttleflow/json_rpc/#getcoldtransferhasheth","text":"Get the hash of eth/erc20 token operation which need private key of cold wallet.","title":"getColdTransferHashEth"},{"location":"shuttleflow/json_rpc/#parameters_6","text":"(1) type: (string), \"ColdToHot\"|\"SplitProfit\",\\ (2) token: (string)\\ (3) amount: (string | number)","title":"Parameters"},{"location":"shuttleflow/json_rpc/#returns_6","text":"JSON object:\\ {\\ token:(string),\\ amount:(string),\\ nonce:(string), operation nonce, \\ hash:(string), internal transaction hash,\\ }","title":"Returns"},{"location":"shuttleflow/json_rpc/#example_6","text":"$ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getColdTransferHashEth\",\"params\":[\"ColdToHot\",\"eth\",\"100000\"],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"token\": \"eth\", \"amount\": \"0x186a0\", \"nonce\": \"0\", \"hash\": \"0xecf1cd87d27cbd0785da88625b7c414ed1954fd8abb3a427f295537152fdeed2\" } }","title":"Example"},{"location":"shuttleflow/json_rpc/#signcoldtransferbtc","text":"sign the bitcoin transfer cold wallet to another address request.","title":"signColdTransferBtc"},{"location":"shuttleflow/json_rpc/#parameters_7","text":"(1) type:(string) \"ColdToHot\"|\"ColdTransfer\"|\"ProfitTransfer\"|\"SplitProfit\",\\ (2) amount: (string | number), Optional (only \"ColdToHot\" | \"SplitProfit\"),\\ (3) hash:(string) internal transaction hash to sign\\ (4) signatures:(array of array of string) signature of each utxos used (5) signer:(string) signer's public key","title":"Parameters"},{"location":"shuttleflow/json_rpc/#returns_7","text":"\"sign successfully\" | Error Message (string)","title":"Returns"},{"location":"shuttleflow/json_rpc/#example_7","text":"$ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"signColdTransferBtc\",\"params\":[\"ColdToHot\",\"100000\",\"c051866e922c9d0eee16b075791fc71076c55b0e7c7da2f03cebc41ff3f234e0#1\",[[\"7d6b239bab77e06a7814e07653ce0b746b559a101f4958dccd5cab0e8801c00c\"]]],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": \"sign successfully\" } $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"signColdTransferBtc\",\"params\":[\"SplitProfit\",\"100000\",\"SplitProfit@2N9rEmrpFA1b7HKZiDghnNEmTy6MDrgV3aC@@0x186a0#1\",[[\"304402202c645b25cc329d2b8adb82c7ee0aca60e28e132bc8ac500efd18aa5229b9531b02201a4972bda60aeaddd489d0774d3b2648a3384c2767dbb6ee1a395941e241909301\"]]],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": \"sign successfully\" }","title":"Example"},{"location":"shuttleflow/json_rpc/#signcoldtransfereth","text":"sign the ethereum or erc20 token transfer cold wallet to another address request.","title":"signColdTransferEth"},{"location":"shuttleflow/json_rpc/#parameters_8","text":"(1) type: (string), \"ColdToHot\"|\"SplitProfit\",\\ (2) token:(string) token name or erc20 or eth,\\ (3) amount:(string),\\ (4) nonce:(string), operation nonce,\\ (5) hash:(string), internal transaction hash,\\ (6) signature:(string), signature of hash (7) signer:(string), signer's public key","title":"Parameters"},{"location":"shuttleflow/json_rpc/#returns_8","text":"\"sign successfully\" | Error Message (string)","title":"Returns"},{"location":"shuttleflow/json_rpc/#example_8","text":"$ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"signColdTransferEth\",\"params\":[\"ColdToHot\",\"eth\",\"100000\",\"0\",\"0xecf1cd87d27cbd0785da88625b7c414ed1954fd8abb3a427f295537152fdeed2\",\"0x6df962201a0372d415d79ef6b8cfde457ea2f6a352651f0b189c6d114615a4cb6a9c298fe36b9954bc55a6e42295a8c6720a0aec0d4d85b0c82db1d6e10d1c741b\"],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": \"sign successfully\" }","title":"Example"},{"location":"shuttleflow/json_rpc/#getmemberchangeinfo","text":"Get last member change information.","title":"getMemberChangeInfo"},{"location":"shuttleflow/json_rpc/#parameters_9","text":"None.","title":"Parameters"},{"location":"shuttleflow/json_rpc/#returns_9","text":"JSON object:\\ {\\ info:(JSON object) Member change detail:\\ {\\ epoch:(Number),\\ changes:(array of JSON object) [{,\\ member:(string),\\ operation:(string) \"add\" | \"remove\",\\ }...]\\ }\\ address_change:(JSON object) bitcoin address change detail:\\ {\\ last_hot_address:(string),\\ last_cold_address:(string),\\ last_profit_address:(string),\\ hot_address:(string),\\ cold_address:(string),\\ profit_address:(string),\\ }\\ }","title":"Returns"},{"location":"shuttleflow/json_rpc/#example_9","text":"$ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getMemberChangeInfo\",\"params\":[],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"info\": { \"epoch\": 200924, \"changes\": [{ \"member\": \"0x81f3521d71990945B99e1C592750D7157F2b544f\", \"operation\": \"remove\" }, { \"member\": \"0x65CF2b2c91e6eff901F10ab7363ae58cf1bfCCc5\", \"operation\": \"remove\" }, { \"member\": \"0x81f3521d71990945b99e1c592750d7157f2b544f\", \"operation\": \"add\" }, { \"member\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"operation\": \"add\" }, { \"member\": \"0x2338f8646aeaa5a32d374fae49ee7aae6bca1efc\", \"operation\": \"add\" }] }, \"address_change\": { \"last_hot_address\": \"2MsPJwNqdeUHvxM3munWBxtCE2WncF9PKbZ\", \"last_cold_address\": \"2N5d2CVouyjaF8thM9anTTcJFyHvhF2AdRS\", \"last_profit_address\": \"2N9rEmrpFA1b7HKZiDghnNEmTy6MDrgV3aC\", \"cold_address\": \"2MyP3jysyz1GTeD6VHPZ6Wqs5SkNc2VkNBb\", \"profit_address\": \"2N7tUaxmwq9rwtXZUYymiYXnn9s7Vd2hMZp\", \"hot_address\": \"2N7UpxpCo6gEpPdjksZPPE9GjTq8JY1KQpz\" } } }","title":"Example"},{"location":"shuttleflow/json_rpc/#gethotcoldwallettransferlist","text":"Get wallet transfer operations list between hot and cold wallet.","title":"getHotColdWalletTransferList"},{"location":"shuttleflow/json_rpc/#parameters_10","text":"(1) skip:(Number) the number of leading operations to be ignored\\ (2) count:(Number) the maximum number of operations to return","title":"Parameters"},{"location":"shuttleflow/json_rpc/#returns_10","text":"","title":"Returns"},{"location":"shuttleflow/json_rpc/#example_10","text":"JSON object:\\ {\\ txs: (Array of JSON objects) transactions in requested range\\ [\\ For doing request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ need:(Number) total number of signatures needed,\\ signer:(array of string) list of members who have signed,\\ has_signed:(bool) whether current member has signed or not,\\ status:(string) \"doing\",\\ },\\ For finished request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ status:(string) \"finished\",\\ }...]\\ total: (Number) total number of transactions,\\ }","title":"Example"},{"location":"shuttleflow/json_rpc/#example_11","text":"$ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getHotColdWalletTransferList\",\"params\":[0,100],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"txs\": [{ \"type\": \"eth_ColdToHot\", \"nonce_or_txid\": \"0\", \"amount\": \"100000\", \"user_addr\": \"\", \"addr\": \"\", \"signer\": [\"0x6B6C3A1eC5C689C3dd158b1a6E8Bc722373a2BfA\"], \"has_signed\": true, \"need\": 2, \"status\": \"doing\" }, { \"type\": \"eth_HotToCold\", \"nonce_or_txid\": \"0\", \"user_addr\": \"\", \"addr\": \"\", \"status\": \"finished\" }], \"total\": 2 } }","title":"Example"},{"location":"shuttleflow/json_rpc/#getprofitsplitlist","text":"Get profit split operations list.","title":"getProfitSplitList"},{"location":"shuttleflow/json_rpc/#parameters_11","text":"(1) skip:(Number) the number of leading operations to be ignored\\ (2) count:(Number) the maximum number of operations to return","title":"Parameters"},{"location":"shuttleflow/json_rpc/#returns_11","text":"JSON object:\\ {\\ txs: (Array of JSON objects) transactions in requested range\\ [\\ For doing request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ need:(Number) total number of signatures needed,\\ signer:(array of string) list of members who have signed,\\ has_signed:(bool) whether current member has signed or not,\\ status:(string) \"doing\",\\ },\\ For finished request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ status:(string) \"finished\",\\ }...]\\ total: (Number) total number of transactions,\\ }","title":"Returns"},{"location":"shuttleflow/json_rpc/#example_12","text":"$ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getProfitSplitList\",\"params\":[0,100],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"txs\": [{ \"type\": \"eth_SplitProfit\", \"nonce_or_txid\": \"1\", \"amount\": \"100\", \"user_addr\": \"\", \"addr\": \"\", \"status\": \"finished\" }], \"total\": 1 } }","title":"Example"},{"location":"shuttleflow/json_rpc/#getuseroperationlist","text":"Get user mint/burn operations list.","title":"getUserOperationList"},{"location":"shuttleflow/json_rpc/#parameters_12","text":"(1) skip:(Number) the number of leading operations to be ignored\\ (2) count:(Number) the maximum number of operations to return","title":"Parameters"},{"location":"shuttleflow/json_rpc/#returns_12","text":"JSON object:\\ {\\ txs: (Array of JSON objects) transactions in requested range\\ [\\ For doing request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ need:(Number) total number of signatures needed,\\ signer:(array of string) list of members who have signed,\\ has_signed:(bool) whether current member has signed or not,\\ status:(string) \"doing\",\\ },\\ For finished request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ status:(string) \"finished\",\\ }...]\\ total: (Number) total number of transactions,\\ }","title":"Returns"},{"location":"shuttleflow/json_rpc/#example_13","text":"$ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getUserOperationList\",\"params\":[0,100],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"txs\": [{ \"type\": \"eth_mint\", \"nonce_or_txid\": \"0x0002a128139692f866b6a1615ce2c40ad337796fc0ca6e51cc7eb6e30baab760\", \"amount\": \"1000000000000000\", \"user_addr\": \"0x65CF2b2c91e6eff901F10ab7363ae58cf1bfCCc5\", \"to_addr\": \"0x65CF2b2c91e6eff901F10ab7363ae58cf1bfCCc5\", \"signer\": [\"fafa\"], \"has_signed\": true, \"need\": 2, \"status\": \"doing\" }, { \"type\": \"btc_mint\", \"nonce_or_txid\": \"ab68b057429271ac11a860002264c77e074d1125e3ee30d865e5276a488fad90\", \"amount\": \"100000\", \"user_addr\": \"0x81f3521d71990945b99e1c592750d7157f2b544f\", \"to_addr\": \"0x81f3521d71990945b99e1c592750d7157f2b544f\", \"status\": \"finished\" }, { \"type\": \"eth_mint\", \"nonce_or_txid\": \"0xe06818b9da4feef5cd590bd68aa23f13e29ef49354ecdd1ae18b11074bf47478\", \"amount\": \"1000000000000000\", \"user_addr\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"to_addr\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"status\": \"finished\" }, { \"type\": \"cUSDT_mint\", \"nonce_or_txid\": \"0xf1685c53cf641b330d580e9a38f783d1ad875250ffae49d182d7189c9de7907e\", \"amount\": \"100000\", \"user_addr\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"to_addr\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"status\": \"finished\" }, { \"type\": \"withdraw\", \"nonce_or_txid\": \"af6e2107fe26a54f84f234941db111afea9de9c9d1caa4d18778fcf22fe12247\", \"amount\": \"100000\", \"user_addr\": \"\", \"to_addr\": \"\", \"status\": \"finished\" }], \"total\": 5 } }","title":"Example"},{"location":"shuttleflow/json_rpc/#getspecificuseroperationlist","text":"Get user mint/burn operations list of specific user.","title":"getSpecificUserOperationList"},{"location":"shuttleflow/json_rpc/#parameters_13","text":"(1) data:(JSON Object) the query detail\\ (2) skip:(Number) the number of leading operations to be ignored\\ (3) count:(Number) the maximum number of operations to return","title":"Parameters"},{"location":"shuttleflow/json_rpc/#returns_13","text":"JSON object:\\ {\\ txs: (Array of JSON objects) transactions in requested range\\ [\\ For doing request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ need:(Number) total number of signatures needed,\\ signer:(array of string) list of members who have signed,\\ has_signed:(bool) whether current member has signed or not,\\ status:(string) \"doing\",\\ },\\ For finished request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ status:(string) \"finished\",\\ }...]\\ total: (Number) total number of transactions,\\ }","title":"Returns"},{"location":"shuttleflow/json_rpc/#example_14","text":"$ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getSpecificUserOperationList\",\"params\":[{\"address\":\"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\",\"status\":[\"doing\",\"finished\"],\"types\":[\"eth_mint\",\"erc20_mint\"]},0,100],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"txs\": [{ \"type\": \"eth_mint\", \"nonce_or_txid\": \"0xe06818b9da4feef5cd590bd68aa23f13e29ef49354ecdd1ae18b11074bf47478\", \"amount\": \"1000000000000000\", \"user_addr\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"to_addr\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"status\": \"finished\" }, { \"type\": \"eth_mint\", \"nonce_or_txid\": \"0x0002a128139692f866b6a1615ce2c40ad337796fc0ca6e51cc7eb6e30baab760\", \"amount\": \"1000000000000000\", \"user_addr\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"to_addr\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"status\": \"finished\" }], \"total\": 2 } }","title":"Example"},{"location":"shuttleflow/json_rpc/#getwallettransferlist","text":"Get wallet transfer operation list during custodian member changing.","title":"getWalletTransferList"},{"location":"shuttleflow/json_rpc/#parameters_14","text":"(1) skip:(Number) the number of leading operations to be ignored\\ (2) count:(Number) the maximum number of operations to return","title":"Parameters"},{"location":"shuttleflow/json_rpc/#returns_14","text":"JSON object:\\ {\\ txs: (Array of JSON objects) transactions in requested range\\ [\\ For doing request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ need:(Number) total number of signatures needed,\\ signer:(array of string) list of members who have signed,\\ has_signed:(bool) whether current member has signed or not,\\ status:(string) \"doing\",\\ },\\ For finished request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ status:(string) \"finished\",\\ }...]\\ total: (Number) total number of transactions,\\ }","title":"Returns"},{"location":"shuttleflow/json_rpc/#example_15","text":"$ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getWalletTransferList\",\"params\":[0,100],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"txs\": [{ \"type\": \"ProfitTransfer\", \"nonce_or_txid\": \"3\", \"amount\": \"NaN\", \"user_addr\": \"2N9rEmrpFA1b7HKZiDghnNEmTy6MDrgV3aC\", \"to_addr\": \"2N7tUaxmwq9rwtXZUYymiYXnn9s7Vd2hMZp\", \"status\": \"finished\" }, { \"type\": \"HotTransfer\", \"nonce_or_txid\": \"ab68b057429271ac11a860002264c77e074d1125e3ee30d865e5276a488fad90\", \"amount\": \"60000\", \"user_addr\": \"2MsPJwNqdeUHvxM3munWBxtCE2WncF9PKbZ\", \"to_addr\": \"2N7UpxpCo6gEpPdjksZPPE9GjTq8JY1KQpz\", \"status\": \"finished\" }], \"total\": 2 } }","title":"Example"},{"location":"shuttleflow/json_rpc/#getcustodianinfo","text":"Get information of custodian members.","title":"getCustodianInfo"},{"location":"shuttleflow/json_rpc/#parameters_15","text":"None.","title":"Parameters"},{"location":"shuttleflow/json_rpc/#returns_15","text":"JSON objects:\\ {\\ custodians:(Array of JSON objects):\\ [{\\ name:(string),\\ keys:(JSON object) keys of custodian member,\\ join_epoch:(Number) epoch the member joined the custodian,\\ sig_cnt:(string) times of multi-signature the member participated in,\\ }, ...],\\ op_cnt:(Number) total number of multi-signature operations,\\ }","title":"Returns"},{"location":"shuttleflow/json_rpc/#example_16","text":"$ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getCustodianInfo\",\"params\":[],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"custodians\": [{ \"name\": \"fafa\", \"keys\": { \"cfx_hot\": \"0x81f3521d71990945b99e1c592750d7157f2b544f\", \"cfx_cold\": \"0x81f3521d71990945b99e1c592750d7157f2b544f\", \"eth_hot\": \"0x6B6C3A1eC5C689C3dd158b1a6E8Bc722373a2BfA\", \"eth_cold\": \"0x6B6C3A1eC5C689C3dd158b1a6E8Bc722373a2BfA\", \"btc_hot\": \"021a72579a46e91c11cc01f8e072c4a4eedfc477bfc8f2925e02ec006420b4cfc8\", \"btc_cold\": \"039802c21509fdcec599680c04a7e93234a954997184aeccaf96006fe8c3c68b74\" }, \"join_epoch\": 1578246, \"sig_cnt\": 5 }, { \"name\": \"ppd\", \"keys\": { \"cfx_hot\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"cfx_cold\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"eth_hot\": \"0x578Dd2BFc41bb66e9f0ae0802C613996440C9597\", \"eth_cold\": \"0x578Dd2BFc41bb66e9f0ae0802C613996440C9597\", \"btc_hot\": \"02af37a0dbdb234f8f522b8980c9100b4a9cc989be54a09354a12f4122a7e2b87c\", \"btc_cold\": \"03919638867f7e32c58d902a7b95ccfe1bfd928fc44544e0414be99f6addcee790\" }, \"join_epoch\": 1578246, \"sig_cnt\": 5 }, { \"name\": \"autumn\", \"keys\": { \"cfx_hot\": \"0x2338f8646aeaa5a32d374fae49ee7aae6bca1efc\", \"cfx_cold\": \"0x2338f8646aeaa5a32d374fae49ee7aae6bca1efc\", \"eth_hot\": \"0xF0D8ABE44f98F198F1DB255A7833F27a28774D35\", \"eth_cold\": \"0xF0D8ABE44f98F198F1DB255A7833F27a28774D35\", \"btc_hot\": \"028ff2d81abce71ab8b910f4b604b976907f7310cf8970093f09bb7726f14d7534\", \"btc_cold\": \"028ff2d81abce71ab8b910f4b604b976907f7310cf8970093f09bb7726f14d7534\" }, \"join_epoch\": 1579865, \"sig_cnt\": 0 }], \"op_cnt\": 18 } }","title":"Example"},{"location":"shuttleflow/json_rpc/#getbounds","text":"Get bounds of tokens.","title":"getBounds"},{"location":"shuttleflow/json_rpc/#parameters_16","text":"None.","title":"Parameters"},{"location":"shuttleflow/json_rpc/#returns_16","text":"JSON object","title":"Returns"},{"location":"shuttleflow/json_rpc/#example_17","text":"$ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getBounds\",\"params\":[],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.21.174:8001 { \"eth\": { \"lower_bound\": \"0\", \"upper_bound\": \"10000000000000000\" }, \"btc\": { \"lower_bound\": \"0\", \"upper_bound\": \"10000000000\" }, \"usdt\": { \"lower_bound\": \"0\", \"upper_bound\": \"10000000000000000\" } }","title":"Example"},{"location":"shuttleflow/sdk/","text":"Conflux Shuttleflow SDK https://www.npmjs.com/package/conflux-crosschain Functions // get ethereum receive wallet address (used for both eth & usdt) of user. // when user send money to receive wallet, custodian will directly deposit the // money to conflux dex. // user_address: conflux address of user // node_url: url of running crosschain custodian node async function getUserReceiveWalletEth(user_address, node_url); // get bitcoin receive wallet address (used for both eth & usdt) of user. // when user send money to receive wallet, custodian will directly deposit the // money to conflux dex. // user_address: conflux address of user // node_url: url of running crosschain custodian node async function getUserReceiveWalletBtc(user_address, node_url); // burn request are processed by dex CRC-L and is deprecated in this sdk. // get user mint/burn operation list. // data: JSON object // { // address: (String) user conflux address, // types: (array of String) subset of {\"eth_mint\", \"eth_burn\", \"erc20_mint\", \"erc20_burn\", \"btc_mint\", \"btc_burn\"}, // status: (array of String) subset of {\"doing\", \"finished\"}, // } // skip: the number of leading results to be ignored // cnt: the maximum number of results to return // node_url: url of running crosschain custodian node async function getUserOperationList(data, skip, cnt, node_url); Const parameters for test crosschain.test_conf = { usdt_addr: // usdt address on rinkeby testnet, node_url: // custodian node url, }; Examples Import crosschain module. const crosschain = require('crosschain'); const test_conf = crosschain.test_conf; get receive wallet address of a user: let receive_wallet = crosschain.getUserReceiveWalletEth( '0x6B6C3A1eC5C689C3dd158b1a6E8Bc722373a2BfA', test_conf.node_url ); // send eth to receive_wallet, custodian will mint cETH for users and then transfer them to CRC-L. // user's cETH will be locked in the address of CRC-L of cETH. get user operation list: crosschain.getUserOperationList({ address: '0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5',// for example types: ['eth_mint', 'eth_burn', 'erc20_mint'], status: ['finished', 'doing'], }, 0, 100, test_conf.node_url).then(console.log); /* { txs: [ { type: 'eth_mint', nonce_or_txid: '0xacf0ae864689f19789ea43cdc3daf0fa41fdeb5392dfe5291c6aab1a4b6c128b', amount: '1000000000000000', user_addr: '0x65CF2b2c91e6eff901F10ab7363ae58cf1bfCCc5', to_addr: '0x65CF2b2c91e6eff901F10ab7363ae58cf1bfCCc5', signer: [ 'fafa' ], has_signed: true, need: 2, status: 'doing' }, { type: 'cUSDT_mint', nonce_or_txid: '0x6eb599af3ab6242260dada6f6b57dad91faa64518d7cf1ac4a975f7f718a8b29', amount: '100000', user_addr: '0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5', to_addr: '0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5', status: 'finished' }, { type: 'cUSDT_mint', nonce_or_txid: '0x490ae855b02c50d57eafd96351359e21bc689a1385443f33a764121f22b84b2b', amount: '100000', user_addr: '0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5', to_addr: '0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5', status: 'finished' } ], total: 3 } */ get mintable status: crosschain.isMintable(test_conf.node_url).then(console.log); true","title":"Conflux Crosschain SDK"},{"location":"shuttleflow/sdk/#conflux-shuttleflow-sdk","text":"https://www.npmjs.com/package/conflux-crosschain","title":"Conflux Shuttleflow SDK"},{"location":"shuttleflow/sdk/#functions","text":"// get ethereum receive wallet address (used for both eth & usdt) of user. // when user send money to receive wallet, custodian will directly deposit the // money to conflux dex. // user_address: conflux address of user // node_url: url of running crosschain custodian node async function getUserReceiveWalletEth(user_address, node_url); // get bitcoin receive wallet address (used for both eth & usdt) of user. // when user send money to receive wallet, custodian will directly deposit the // money to conflux dex. // user_address: conflux address of user // node_url: url of running crosschain custodian node async function getUserReceiveWalletBtc(user_address, node_url); // burn request are processed by dex CRC-L and is deprecated in this sdk. // get user mint/burn operation list. // data: JSON object // { // address: (String) user conflux address, // types: (array of String) subset of {\"eth_mint\", \"eth_burn\", \"erc20_mint\", \"erc20_burn\", \"btc_mint\", \"btc_burn\"}, // status: (array of String) subset of {\"doing\", \"finished\"}, // } // skip: the number of leading results to be ignored // cnt: the maximum number of results to return // node_url: url of running crosschain custodian node async function getUserOperationList(data, skip, cnt, node_url);","title":"Functions"},{"location":"shuttleflow/sdk/#const-parameters-for-test","text":"crosschain.test_conf = { usdt_addr: // usdt address on rinkeby testnet, node_url: // custodian node url, };","title":"Const parameters for test"},{"location":"shuttleflow/sdk/#examples","text":"Import crosschain module. const crosschain = require('crosschain'); const test_conf = crosschain.test_conf; get receive wallet address of a user: let receive_wallet = crosschain.getUserReceiveWalletEth( '0x6B6C3A1eC5C689C3dd158b1a6E8Bc722373a2BfA', test_conf.node_url ); // send eth to receive_wallet, custodian will mint cETH for users and then transfer them to CRC-L. // user's cETH will be locked in the address of CRC-L of cETH. get user operation list: crosschain.getUserOperationList({ address: '0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5',// for example types: ['eth_mint', 'eth_burn', 'erc20_mint'], status: ['finished', 'doing'], }, 0, 100, test_conf.node_url).then(console.log); /* { txs: [ { type: 'eth_mint', nonce_or_txid: '0xacf0ae864689f19789ea43cdc3daf0fa41fdeb5392dfe5291c6aab1a4b6c128b', amount: '1000000000000000', user_addr: '0x65CF2b2c91e6eff901F10ab7363ae58cf1bfCCc5', to_addr: '0x65CF2b2c91e6eff901F10ab7363ae58cf1bfCCc5', signer: [ 'fafa' ], has_signed: true, need: 2, status: 'doing' }, { type: 'cUSDT_mint', nonce_or_txid: '0x6eb599af3ab6242260dada6f6b57dad91faa64518d7cf1ac4a975f7f718a8b29', amount: '100000', user_addr: '0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5', to_addr: '0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5', status: 'finished' }, { type: 'cUSDT_mint', nonce_or_txid: '0x490ae855b02c50d57eafd96351359e21bc689a1385443f33a764121f22b84b2b', amount: '100000', user_addr: '0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5', to_addr: '0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5', status: 'finished' } ], total: 3 } */ get mintable status: crosschain.isMintable(test_conf.node_url).then(console.log); true","title":"Examples"},{"location":"shuttleflow/smart_contract/","text":"The Shuttleflow Smart Contracts Design and Implementation Design Goals The Shuttleflow smart contracts have following design goals: Support atomic mapping between Conflux cToken and cross chain assets including BTC, ETH and USDT. Maintain the membership and authority of custodian alliance. Pausable and upgradable, data migration. Components (on Conflux) CustodianCore CustodianCore (contracts/core/CustodianCore.sol) is the main contract of custodian alliance on Conflux chain. It maintains the information of custodian members and configurations for custodian nodes, including: * Custodian member's address/public key of different chain * The address of all cTokens and their binding CRC-L address * The upper/lower bounds of custodian alliance's bitcoin hot wallet * The withdraw operation fee for bitcoin * Processed user mint requests (indexed by payment transaction id on other block chain) Ownership and authorities: * At this point, the owner of CustodianCore is Conflux admin, who is enabled to modify custodian node configurations and custodian membership. * CustodianCore is the owner of all cToken so only it has the authority to mint cTokens. Core Functions: function mint(string calldata token, address to, uint amount, string calldata tx_id, bytes calldata signatures ) external onlyCustodian whenNotPaused; Mint cToken for a user and then send the minted cToken to its binding CRC-L contract with default operator authority, trigger the callback of CRC-L contract and CRC-L will mint corresponding amount CRC-L token for user. This functions needs over 2/3 signatures from current custodian members. function btcHotToCold( uint256 nonce, uint256 btc_cold_balance, bytes memory signatures ) public onlyCustodian whenNotPaused This function will be called periodically by custodian nodes. It checks if the balance of custodian alliance's bitcoin hot wallet is larger than the upper bound and computes the amount of bitcoin they need to transfer to cold wallet. This functions needs over 2/3 signatures from current custodian members. TokenBase TokenBase (contracts/token/TokenBase.sol) is the cross chain token contract (cToken). It is a ERC777 standard token. Owership and autorities: * Owner of cToken is initially who deployed it (Conflux admin), then its owner will transfer the ownership to CustodianCore contract. Only owner of the contract is able to mint cToken. * Only pausers are able to pause/unpause the cToken contract. Initially, the pauser of cToken is Conflux admin, the pauser can add other pausers. Core Functions: TokenBase inherited from a pausable ERC777 contract, besides ERC777 standard functions, it also implemented following functions for cross chain: function mint( address account, uint256 amount, string memory tx_id ) public onlyOwner whenNotPaused returns (bool); Owner authority required. Mint tokens for user. Emits Minted(address indexed toAddress, uint256 indexed amount, string tx_id) event, the custodian nodes listen to this event and know a mint request from user is done. function burn( address useraddr, uint256 amount, string memory addr ) public whenNotPaused returns (bool); Burn cToken from sender's address, Emits Burnt(uint256 indexed amount, string toAddress, address indexed fromAddress) event, the custodian nodes listen to this event and will withdraw cross chain assets to toAddress , which is a bitcoin/eth address. Components (on Ethereum) EthFactory Similar to CustodianCore , EthFactory (contracts/factory/EthFactory.sol) is the main contract of custodian alliance on Ethereum chain. It maintains the information of custodian members and configurations for custodian nodes, including: * Custodian member's ethereum address * The address of all supported erc20 tokens in Shuttleflow (USDT for now) * The upper/lower bounds of custodian alliance's eth&erc20 hot wallet * The withdraw operation fee for eth/erc20 * Processed user mint requests (indexed by withdraw transaction id on Conflux) Ownership and authorities: * At this point, the owner of EthFactory is Conflux admin, who is enabled to modify custodian node configurations and custodian membership. * CustodianCore is the owner of all cToken so only it has the authority to mint cTokens. Core Functions: function burn( address payable toAddress, uint amount, string memory tx_id, bytes memory signatures ) public onlyCustodian onlyAlive; Owner authority required. Withdraw eth/erc20 token to user's address. This functions needs over 2/3 signatures from current custodian members. function transferHotToCold( uint256 nonce, bytes memory signatures ) public onlyCustodian onlyAlive; Will be called by custodian node periodically. Automatically transfer eth/erc20 token from hot wallet to cold wallet (both maintained by variables in EthFactory) if hot wallet balance is larger than upper bound. This functions needs over 2/3 signatures from current custodian members. function transferColdToHot( string memory token, uint256 amount, uint256 nonce, bytes memory signatures ) public onlyCustodian onlyAlive; Transfer specified amount of eth/erc20 token from cold wallet to hot wallet. This functions needs over 2/3 signatures from current custodian members using their cold wallet private key. ReceiveWallet ReceiveWallet (or payment wallet) (contracts/factory/ReceiveWallet.sol) is the contract of user payment wallet (in other words, the receive wallet for custodian alliance). The receive wallet can only transfer eth/erc20 token to the address of EthFactory, which is initialized when receive wallet contract construction and can not be modified in future. Core Functions: function retrieve() public; Transfer all eth to EthFactory contract. function retrieveToken(address token) public; Transfer all erc20 token to EthFactory contract. Create2Factory Create2Factory (contracts/factory/Create2Factory.sol) is the generator of user payment wallet. It can calculate the address of payment wallet of a specific user conflux address before the payment wallet contract is really deployed. This contract enable the custodian alliance provide the payment wallet address to user and deploy the payment wallet contract after they received at least one payment from user.","title":"The Shuttleflow Smart Contracts Design and Implementation"},{"location":"shuttleflow/smart_contract/#the-shuttleflow-smart-contracts-design-and-implementation","text":"","title":"The Shuttleflow Smart Contracts Design and Implementation"},{"location":"shuttleflow/smart_contract/#design-goals","text":"The Shuttleflow smart contracts have following design goals: Support atomic mapping between Conflux cToken and cross chain assets including BTC, ETH and USDT. Maintain the membership and authority of custodian alliance. Pausable and upgradable, data migration.","title":"Design Goals"},{"location":"shuttleflow/smart_contract/#components-on-conflux","text":"","title":"Components (on Conflux)"},{"location":"shuttleflow/smart_contract/#custodiancore","text":"CustodianCore (contracts/core/CustodianCore.sol) is the main contract of custodian alliance on Conflux chain. It maintains the information of custodian members and configurations for custodian nodes, including: * Custodian member's address/public key of different chain * The address of all cTokens and their binding CRC-L address * The upper/lower bounds of custodian alliance's bitcoin hot wallet * The withdraw operation fee for bitcoin * Processed user mint requests (indexed by payment transaction id on other block chain) Ownership and authorities: * At this point, the owner of CustodianCore is Conflux admin, who is enabled to modify custodian node configurations and custodian membership. * CustodianCore is the owner of all cToken so only it has the authority to mint cTokens. Core Functions: function mint(string calldata token, address to, uint amount, string calldata tx_id, bytes calldata signatures ) external onlyCustodian whenNotPaused; Mint cToken for a user and then send the minted cToken to its binding CRC-L contract with default operator authority, trigger the callback of CRC-L contract and CRC-L will mint corresponding amount CRC-L token for user. This functions needs over 2/3 signatures from current custodian members. function btcHotToCold( uint256 nonce, uint256 btc_cold_balance, bytes memory signatures ) public onlyCustodian whenNotPaused This function will be called periodically by custodian nodes. It checks if the balance of custodian alliance's bitcoin hot wallet is larger than the upper bound and computes the amount of bitcoin they need to transfer to cold wallet. This functions needs over 2/3 signatures from current custodian members.","title":"CustodianCore"},{"location":"shuttleflow/smart_contract/#tokenbase","text":"TokenBase (contracts/token/TokenBase.sol) is the cross chain token contract (cToken). It is a ERC777 standard token. Owership and autorities: * Owner of cToken is initially who deployed it (Conflux admin), then its owner will transfer the ownership to CustodianCore contract. Only owner of the contract is able to mint cToken. * Only pausers are able to pause/unpause the cToken contract. Initially, the pauser of cToken is Conflux admin, the pauser can add other pausers. Core Functions: TokenBase inherited from a pausable ERC777 contract, besides ERC777 standard functions, it also implemented following functions for cross chain: function mint( address account, uint256 amount, string memory tx_id ) public onlyOwner whenNotPaused returns (bool); Owner authority required. Mint tokens for user. Emits Minted(address indexed toAddress, uint256 indexed amount, string tx_id) event, the custodian nodes listen to this event and know a mint request from user is done. function burn( address useraddr, uint256 amount, string memory addr ) public whenNotPaused returns (bool); Burn cToken from sender's address, Emits Burnt(uint256 indexed amount, string toAddress, address indexed fromAddress) event, the custodian nodes listen to this event and will withdraw cross chain assets to toAddress , which is a bitcoin/eth address.","title":"TokenBase"},{"location":"shuttleflow/smart_contract/#components-on-ethereum","text":"","title":"Components (on Ethereum)"},{"location":"shuttleflow/smart_contract/#ethfactory","text":"Similar to CustodianCore , EthFactory (contracts/factory/EthFactory.sol) is the main contract of custodian alliance on Ethereum chain. It maintains the information of custodian members and configurations for custodian nodes, including: * Custodian member's ethereum address * The address of all supported erc20 tokens in Shuttleflow (USDT for now) * The upper/lower bounds of custodian alliance's eth&erc20 hot wallet * The withdraw operation fee for eth/erc20 * Processed user mint requests (indexed by withdraw transaction id on Conflux) Ownership and authorities: * At this point, the owner of EthFactory is Conflux admin, who is enabled to modify custodian node configurations and custodian membership. * CustodianCore is the owner of all cToken so only it has the authority to mint cTokens. Core Functions: function burn( address payable toAddress, uint amount, string memory tx_id, bytes memory signatures ) public onlyCustodian onlyAlive; Owner authority required. Withdraw eth/erc20 token to user's address. This functions needs over 2/3 signatures from current custodian members. function transferHotToCold( uint256 nonce, bytes memory signatures ) public onlyCustodian onlyAlive; Will be called by custodian node periodically. Automatically transfer eth/erc20 token from hot wallet to cold wallet (both maintained by variables in EthFactory) if hot wallet balance is larger than upper bound. This functions needs over 2/3 signatures from current custodian members. function transferColdToHot( string memory token, uint256 amount, uint256 nonce, bytes memory signatures ) public onlyCustodian onlyAlive; Transfer specified amount of eth/erc20 token from cold wallet to hot wallet. This functions needs over 2/3 signatures from current custodian members using their cold wallet private key.","title":"EthFactory"},{"location":"shuttleflow/smart_contract/#receivewallet","text":"ReceiveWallet (or payment wallet) (contracts/factory/ReceiveWallet.sol) is the contract of user payment wallet (in other words, the receive wallet for custodian alliance). The receive wallet can only transfer eth/erc20 token to the address of EthFactory, which is initialized when receive wallet contract construction and can not be modified in future. Core Functions: function retrieve() public; Transfer all eth to EthFactory contract. function retrieveToken(address token) public; Transfer all erc20 token to EthFactory contract.","title":"ReceiveWallet"},{"location":"shuttleflow/smart_contract/#create2factory","text":"Create2Factory (contracts/factory/Create2Factory.sol) is the generator of user payment wallet. It can calculate the address of payment wallet of a specific user conflux address before the payment wallet contract is really deployed. This contract enable the custodian alliance provide the payment wallet address to user and deploy the payment wallet contract after they received at least one payment from user.","title":"Create2Factory"}]}