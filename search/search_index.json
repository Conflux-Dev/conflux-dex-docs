{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Conflux DEX is a decentralized exchange infrastructure based on Conflux, which is made up of ShuttleFlow , BoomFlow and MatchFlow . ShuttleFlow is used to transfer assets from Bitcoin or Ethereum to Conflux chain. BoomFlow is set of smart contracts on Conflux chain for user assets management and trade settlement. MatchFlow is an order book based matching engine, which provides REST APIs for users to place/cancel orders.","title":"Welcome to Conflux DEX"},{"location":"boomflow/","text":"Welcome to BoomFlow BoomFlow contains two kinds of smart contracts: CRC-L and Boomflow. CRC-L stands for CRC Lock , it is used to lock user assets and only the authrized user or contract could change the user assets. Now, each asset has a separate CRC-L contract. Boomflow contract is responsible for trade settlement and authrized to change user assets in CRC-L contracts. Now, these contracts are not open sourced yet, and only the Matchflow has authrity to access these contracts. Javascript SDK There are two Javascript SDKs available on npm for frontend and backend respectively. Each SDK enables whitelisted users to call functions in smart contracts directly or interact with Conflux DEX REST APIs to place/cancel orders. boomflow : SDK for backend development. Usually, it uses private key or keyfile to sign messages. boomflow frontend : SDK for frontend development. Usually, it uses Conflux Portal to sign messages.","title":"Introduction"},{"location":"boomflow/#welcome-to-boomflow","text":"BoomFlow contains two kinds of smart contracts: CRC-L and Boomflow. CRC-L stands for CRC Lock , it is used to lock user assets and only the authrized user or contract could change the user assets. Now, each asset has a separate CRC-L contract. Boomflow contract is responsible for trade settlement and authrized to change user assets in CRC-L contracts. Now, these contracts are not open sourced yet, and only the Matchflow has authrity to access these contracts.","title":"Welcome to BoomFlow"},{"location":"boomflow/#javascript-sdk","text":"There are two Javascript SDKs available on npm for frontend and backend respectively. Each SDK enables whitelisted users to call functions in smart contracts directly or interact with Conflux DEX REST APIs to place/cancel orders. boomflow : SDK for backend development. Usually, it uses private key or keyfile to sign messages. boomflow frontend : SDK for frontend development. Usually, it uses Conflux Portal to sign messages.","title":"Javascript SDK"},{"location":"matchflow/","text":"Welcome to MatchFlow MatchFlow provides REST API and WebSocket API to place/cancel orders or query market data. Now, MatchFlow have two environments main net and test net, which are used for real trading and simulated trading respectively. Environments API MAINNET TESTNET COMMENT REST API https://api.matchflow.io https://dev.matchflow.io Document WebSocket API wss://api.matchflow.io/ws wss://dev.matchflow.io/ws Document Note, only whitelisted users could access the APIs of main net. Change Logs 2020/04/17 Add new REST API: get incompleted orders. System Optimization: WebSocket, on-chain settlement. Fix bug in FC smart contract. Auto-pause mechansim in case of on-chain settlement exception. 2020/04/09 Server migrate to Tokyo region. System optimization. 2020/03/26 New features Transfer in Conflux DEX REST API changes New added Transfer List transfer records Updated Place order: add fee related fields 2020/03/11 New features Daily limit REST API changes New added Get daily limit of product Get daily limit rate of product Get last closing price of product Updated Currency: add ERC777 contract address 2020/03/06 New features Instant exchange REST API changes New added Get Boomflow address Updated Withdraw: add timestamp field Place order: add timestamp field Cancel order: add timestamp field Cancel order by client order ID: add timestamp field Get user: nonce removed Removed Batch cancel orders User login/logout","title":"Introduction"},{"location":"matchflow/#welcome-to-matchflow","text":"MatchFlow provides REST API and WebSocket API to place/cancel orders or query market data. Now, MatchFlow have two environments main net and test net, which are used for real trading and simulated trading respectively.","title":"Welcome to MatchFlow"},{"location":"matchflow/#environments","text":"API MAINNET TESTNET COMMENT REST API https://api.matchflow.io https://dev.matchflow.io Document WebSocket API wss://api.matchflow.io/ws wss://dev.matchflow.io/ws Document Note, only whitelisted users could access the APIs of main net.","title":"Environments"},{"location":"matchflow/#change-logs","text":"","title":"Change Logs"},{"location":"matchflow/#20200417","text":"Add new REST API: get incompleted orders. System Optimization: WebSocket, on-chain settlement. Fix bug in FC smart contract. Auto-pause mechansim in case of on-chain settlement exception.","title":"2020/04/17"},{"location":"matchflow/#20200409","text":"Server migrate to Tokyo region. System optimization.","title":"2020/04/09"},{"location":"matchflow/#20200326","text":"New features Transfer in Conflux DEX REST API changes New added Transfer List transfer records Updated Place order: add fee related fields","title":"2020/03/26"},{"location":"matchflow/#20200311","text":"New features Daily limit REST API changes New added Get daily limit of product Get daily limit rate of product Get last closing price of product Updated Currency: add ERC777 contract address","title":"2020/03/11"},{"location":"matchflow/#20200306","text":"New features Instant exchange REST API changes New added Get Boomflow address Updated Withdraw: add timestamp field Place order: add timestamp field Cancel order: add timestamp field Cancel order by client order ID: add timestamp field Get user: nonce removed Removed Batch cancel orders User login/logout","title":"2020/03/06"},{"location":"matchflow/eip712/","text":"Why EIP712 To avoid transaction replay attack in different Conflux chains, Conflux DEX follow the way of EIP712 to sign requests from users, which will be validated in MatchFlow and BoomFlow . General Values in HEX format have 0x prefix. Some values (e.g. amount , price ) are BigDecimal or double types, and need to convert to big number in drip format when interact with blockchain. Basically, the formula is: big number = decimal * 10^18 . EIP712 Domain Primary type: EIP712Domain Boomflow Domain NAME TYPE VALUE name string Boomflow version string 1.0 chainId uint256 Retrieve from Conflux RPC server verifyingContract address REST API: /common/boomflow CRCL Domain NAME TYPE VALUE name string CRCL version string 1.0 chainId uint256 Retrieve from Conflux RPC server verifyingContract address REST API: /currencies/${name} In the response of REST API /currencies/${name} , use contractAddress as CRCL contract address, while tokenAddress is the corresponding ERC777 contract address. chainId is 0 by default, however, client should always retrieve it from Conflux RPC server. E.g. call getStatus to get chain ID in Javascript program. Place Order Domain: Boomflow Domain Primary type: Order Schema NAME TYPE VALUE userAddress address HEX format amount uint256 big number in drip price uint256 big number in drip orderType uint256 limit order: 0, market order: 1 side bool buy order: true, sell order: false salt uint256 order timestamp baseAssetAddress address HEX format quoteAssetAddress address HEX format feeAddress address HEX format makerFeePercentage uint256 big number in drip takerFeePercentage uint256 big number in drip Cancel Order Domain: Boomflow Domain Primary type: CancelRequest Schema NAME TYPE VALUE order order schema placed order nonce uint256 order cancellation timestamp Withdraw Domain: CRCL Domain Primary type: WithdrawRequest Schema NAME TYPE VALUE userAddress address HEX format amount uint256 big number in drip recipient address HEX format isCrosschain bool nonce uint256 withdraw timestamp Transfer Domain: CRCL Domain Primary type: TransferRequest Schema NAME TYPE VALUE userAddress address HEX format amounts uint256[] big number in drip recipients address[] HEX format nonce uint256 transfer timestamp","title":"EIP712 Signature"},{"location":"matchflow/eip712/#why-eip712","text":"To avoid transaction replay attack in different Conflux chains, Conflux DEX follow the way of EIP712 to sign requests from users, which will be validated in MatchFlow and BoomFlow .","title":"Why EIP712"},{"location":"matchflow/eip712/#general","text":"Values in HEX format have 0x prefix. Some values (e.g. amount , price ) are BigDecimal or double types, and need to convert to big number in drip format when interact with blockchain. Basically, the formula is: big number = decimal * 10^18 .","title":"General"},{"location":"matchflow/eip712/#eip712-domain","text":"Primary type: EIP712Domain","title":"EIP712 Domain"},{"location":"matchflow/eip712/#boomflow-domain","text":"NAME TYPE VALUE name string Boomflow version string 1.0 chainId uint256 Retrieve from Conflux RPC server verifyingContract address REST API: /common/boomflow","title":"Boomflow Domain"},{"location":"matchflow/eip712/#crcl-domain","text":"NAME TYPE VALUE name string CRCL version string 1.0 chainId uint256 Retrieve from Conflux RPC server verifyingContract address REST API: /currencies/${name} In the response of REST API /currencies/${name} , use contractAddress as CRCL contract address, while tokenAddress is the corresponding ERC777 contract address. chainId is 0 by default, however, client should always retrieve it from Conflux RPC server. E.g. call getStatus to get chain ID in Javascript program.","title":"CRCL Domain"},{"location":"matchflow/eip712/#place-order","text":"Domain: Boomflow Domain Primary type: Order","title":"Place Order"},{"location":"matchflow/eip712/#schema","text":"NAME TYPE VALUE userAddress address HEX format amount uint256 big number in drip price uint256 big number in drip orderType uint256 limit order: 0, market order: 1 side bool buy order: true, sell order: false salt uint256 order timestamp baseAssetAddress address HEX format quoteAssetAddress address HEX format feeAddress address HEX format makerFeePercentage uint256 big number in drip takerFeePercentage uint256 big number in drip","title":"Schema"},{"location":"matchflow/eip712/#cancel-order","text":"Domain: Boomflow Domain Primary type: CancelRequest","title":"Cancel Order"},{"location":"matchflow/eip712/#schema_1","text":"NAME TYPE VALUE order order schema placed order nonce uint256 order cancellation timestamp","title":"Schema"},{"location":"matchflow/eip712/#withdraw","text":"Domain: CRCL Domain Primary type: WithdrawRequest","title":"Withdraw"},{"location":"matchflow/eip712/#schema_2","text":"NAME TYPE VALUE userAddress address HEX format amount uint256 big number in drip recipient address HEX format isCrosschain bool nonce uint256 withdraw timestamp","title":"Schema"},{"location":"matchflow/eip712/#transfer","text":"Domain: CRCL Domain Primary type: TransferRequest","title":"Transfer"},{"location":"matchflow/eip712/#schema_3","text":"NAME TYPE VALUE userAddress address HEX format amounts uint256[] big number in drip recipients address[] HEX format nonce uint256 transfer timestamp","title":"Schema"},{"location":"matchflow/frontend/","text":"If you want to develop a decentralized exchange (DEX) on Conflux chain, MatchFlow is a good choice for you to quickly get start. Why MatchFlow MatchFlow provides APIs to place/cancel orders and query market data. Therefore, you need only to develop a mobile app or web page, and integrates with MatchFlow REST API and WebSocket API . Besides, MatchFlow API allow to set specific trade fee rate/recipient, app could earn trade fee from every order matching. Migrate from CEX MatchFlow provides standard REST and WebSocket APIs following popular centralized exchanges. Any centralized exchange app or web page could easily migrate to Conflux DEX. The only difference between decentralized exchange (DEX) and centralized exchange (DEX) is that Conflux DEX do not requires username/password based login. Instead, Conflux DEX requires user signature to validate authority when user want to place or cancel orders. EIP712 Signature Some REST APIs requires user signature to change user assets: Place order Cancel order Withdraw Transfer Conflux DEX follow the way of EIP712 to validate signed messages, any app based on MatchFlow is required to follow the type schema to sign messages. boomflow frontend SDK is the recommended SDK to interact with MatchFlow for signature required REST APIs.","title":"Frontend Integration"},{"location":"matchflow/frontend/#why-matchflow","text":"MatchFlow provides APIs to place/cancel orders and query market data. Therefore, you need only to develop a mobile app or web page, and integrates with MatchFlow REST API and WebSocket API . Besides, MatchFlow API allow to set specific trade fee rate/recipient, app could earn trade fee from every order matching.","title":"Why MatchFlow"},{"location":"matchflow/frontend/#migrate-from-cex","text":"MatchFlow provides standard REST and WebSocket APIs following popular centralized exchanges. Any centralized exchange app or web page could easily migrate to Conflux DEX. The only difference between decentralized exchange (DEX) and centralized exchange (DEX) is that Conflux DEX do not requires username/password based login. Instead, Conflux DEX requires user signature to validate authority when user want to place or cancel orders.","title":"Migrate from CEX"},{"location":"matchflow/frontend/#eip712-signature","text":"Some REST APIs requires user signature to change user assets: Place order Cancel order Withdraw Transfer Conflux DEX follow the way of EIP712 to validate signed messages, any app based on MatchFlow is required to follow the type schema to sign messages. boomflow frontend SDK is the recommended SDK to interact with MatchFlow for signature required REST APIs.","title":"EIP712 Signature"},{"location":"matchflow/market_maker/","text":"A market maker can easily interact with MatchFlow via REST API and WebSocket API . Firstly, please refer to the document to add a new account in Conflux DEX. After that, market maker could call REST APIs to place orders or cancel orders . Unlike centralized exchanges, Conflux DEX requires EIP712 based user signature to place an order. Accordingly, market maker need to follow the type schema to sign place/cancel order request.","title":"Market Maker"},{"location":"matchflow/reg_user/","text":"Unlike the centralized exchange, Conflux DEX do not require user to register an account via REST API in MatchFlow. Because, Conflux DEX is a decentralized exchange and user assets are all locked in smart contracts on Conflux chain. User need to interact with CRC-L contract for user registration in Conflux DEX. Add User When user deposit assets into CRC-L contracts, MatchFlow listens and polls the deposit event data once the deposit transaction executed and confirmed on Conflux chain. After that, MatchFlow will add or update the account balance in off-chain ledger (database). Generally, the transaction confirmation time on Conflux chain is no more than one minute, so user will be able to place orders after one minute of deposit. API The recommended way to deposit assets is using boomflow frontend SDK , and the available asset list could be retrieved from MatchFlow REST API getCurrencies . Each asset has two contract addresses: contractAddress : asset CRC-L contract address, which is used for DEX only. tokenAddress : asset ERC777 token contract address, which is used for any dapps. With boomflow frontend SDK, user assets could be easily depsoited from ERC777 contract to CRC-L contract.","title":"User Registration"},{"location":"matchflow/reg_user/#add-user","text":"When user deposit assets into CRC-L contracts, MatchFlow listens and polls the deposit event data once the deposit transaction executed and confirmed on Conflux chain. After that, MatchFlow will add or update the account balance in off-chain ledger (database). Generally, the transaction confirmation time on Conflux chain is no more than one minute, so user will be able to place orders after one minute of deposit.","title":"Add User"},{"location":"matchflow/reg_user/#api","text":"The recommended way to deposit assets is using boomflow frontend SDK , and the available asset list could be retrieved from MatchFlow REST API getCurrencies . Each asset has two contract addresses: contractAddress : asset CRC-L contract address, which is used for DEX only. tokenAddress : asset ERC777 token contract address, which is used for any dapps. With boomflow frontend SDK, user assets could be easily depsoited from ERC777 contract to CRC-L contract.","title":"API"},{"location":"matchflow/ws/","text":"MatchFlow WebSocket API MatchFlow WebSocket API provides pub/sub way to monitor the market data and user data, including orders, trades and balance changes. General Websocket URL ws://${conflux_dex_url}/ws Heartbeat and Connection Websocket server will send PING heartbeat message periodically (20 seconds) with an integer number. When client receives the heartbeat message, it should response with a matching PONG message which has the same integer number. Websocket server will disconnect clients if there is no communication message (inclues PING message) in 30 seconds. On the other hand, Websocket server will periodically (20 seconds) disconnect clients if no topic subscribed. Subscribe to Topic To subscribe a topic, please send below message to Websocket server: { \"topic\": \"topic name\", \"sub\": true, \"arguments\": {} } The arguments is used to specify additional parameters to subscribe a topic, e.g. specify user address to subscribe Asset or Order related topics. Unsubscribe To unsubscribe, please send below message to Websocket server: { \"topic\": \"topic name\", \"sub\": false } Topic Response Websocket server push messages of different topics in the same format as below: { \"topic\": \"topic name\", \"timestamp\": 1582609926336, \"data\": {} } As for the data value, please refer to the Update Content that defined for each topic. Market Data Best Bid/Offer Topic market.$product.bbo Update Content public class BestBidOffer { /** * Product name. */ private String product; /** * Quote timestamp. */ private Instant quoteTime; /** * Best bid price. */ private BigDecimal bid; /** * Best bid amount. */ private BigDecimal bidAmount; /** * Best bid order count. */ private int bidCount; /** * Best ask price. */ private BigDecimal ask; /** * Best ask amount. */ private BigDecimal askAmount; /** * Best ask order count. */ private int askCount; } Market Depth Topic market.$product.depth.$step $step : market depth aggregation level, including \"step0\", \"step1\", \"step2\", \"step3\", \"step4\" and \"step5\". For \"step0\", market depth data supports up to 150 levels. For others, market depth data supports up to 20 levels. Update Content { \"Buy\": [{}], \"Sell\": [{}] } public class DepthPriceLevel { /** * Order price. */ private BigDecimal price; /** * Total amount in all orders. */ private BigDecimal amount; /** * Total number of all orders. */ private int count; } Market Details in Last 24 Hours Topic market.$product.detail Update Content public class Tick implements Cloneable { /** * Tick id. (auto-generated) */ private long id; /** * Referenced product id. */ private int productId; /** * Tick granularity in minutes. */ private int granularity; /** * Tick open value. */ private BigDecimal open; /** * Tick high value. */ private BigDecimal high; /** * Tick low value. */ private BigDecimal low; /** * Tick close value. */ private BigDecimal close; /** * Total volume of base currency. */ private BigDecimal baseCurrencyVolume; /** * Total volume of quote currency. */ private BigDecimal quoteCurrencyVolume; /** * Total number of trades. */ private int count; /** * Tick creation timestamp. */ private Timestamp createTime; /** * Last update timestamp. */ private Timestamp updateTime; } Market Tick Topic market.$product.tick.$granularity $granularity : tick granularity, including 1min, 5min, 15min, 30min, 60min, 1day, 1week and 1month. Update Content public class Tick implements Cloneable { /** * Tick id. (auto-generated) */ private long id; /** * Referenced product id. */ private int productId; /** * Tick granularity in minutes. */ private int granularity; /** * Tick open value. */ private BigDecimal open; /** * Tick high value. */ private BigDecimal high; /** * Tick low value. */ private BigDecimal low; /** * Tick close value. */ private BigDecimal close; /** * Total volume of base currency. */ private BigDecimal baseCurrencyVolume; /** * Total volume of quote currency. */ private BigDecimal quoteCurrencyVolume; /** * Total number of trades. */ private int count; /** * Tick creation timestamp. */ private Timestamp createTime; /** * Last update timestamp. */ private Timestamp updateTime; } Trade Detail Topic market.$product.trade.detail Update Content public class Trade { /** * Trade id. (auto-generated) */ private long id; /** * Referenced product id. */ private int productId; /** * Referenced taker order id. */ private long takerOrderId; /** * Referenced maker order id. */ private long makerOrderId; /** * Trade price from maker order. */ private BigDecimal price; /** * Trade amount. */ private BigDecimal amount; /** * Taker order side: \"Buy\", \"Sell\". */ private OrderSide side; /** * Trade fee of taker side. * For \"Buy\" order, it is base currency. * For \"Sell\" order, it is quote currency. */ private BigDecimal takerFee; /** * Trade fee of maker side. * For \"Buy\" order, it is base currency. * For \"Sell\" order, it is quote currency. */ private BigDecimal makerFee; /** * Settlement status: \"OffChainSettled\", \"OnChainSettled\", \"OnChainConfirmed\". */ private SettlementStatus status = SettlementStatus.OffChainSettled; /** * Transaction hash of settlement on blockchain. */ private String txHash; /** * Transaction nonce of settlement on blockchain. */ private long txNonce; /** * Create timestamp. */ private Timestamp createTime = Timestamp.from(Instant.now()); /** * Update timestamp. */ private Timestamp updateTime = this.createTime; } Asset and Order Account Updates Topic accounts Arguments address : user address. model : trigger mode in integer type. 0: Only update when account balance changed; 1: Update when either account balance changed or available balance changed. Update Content public class BalanceChange { /** * Balance change type, including \"OrderPlace\", \"OrderMatch\", \"OrderCancel\", * \"Deposit\", \"Withdraw\" and \"Transfer\". */ private BalanceChangeType type; /** * The account id of the changed balance. */ private long accountId; /** * The currency name of the changed balance. */ private String currency; /** * Account balance (only exists when account balance changed). */ private BigDecimal balance; /** * Available balance (only exists when available balance changed). */ private BigDecimal available; /** * Change time, unix timestamp in milliseconds. */ private long changeTime; } Order Updates Topic order.$product $product : product name or * for all products. Arguments address : user address. Update Content public class OrderChange { /** * Changed order ID. */ private long id; /** * Optional client defined order identity, which is unique for a user. */ private String clientOrderId; /** * Product ID of the changed order. */ private int productId; /** * Order type: \"Limit\", \"Market\". */ private OrderType type; /** * Order side: \"Buy\", \"Sell\". */ private OrderSide side; /** * Order status: \"New\", \"Open\", \"Cancelling\", \"Cancelled\", \"Filled\". */ private OrderStatus status; /** * Order price for \"Limit\" order type only. */ private BigDecimal price; /** * Order amount for \"Limit\" order type or \"Market-Sell\" order. * For \"Market-Buy\" order, it is the total order value. */ private BigDecimal amount; /** * For order matched event, it indicates whether it is a taker order. * For order status changed event, it is true by default. */ private boolean taker; /** * Trade price (only exists for order matched event). */ private BigDecimal tradePrice; /** * Trade amount (only exists for order matched event). */ private BigDecimal tradeAmount; /** * Trade fee (only exists for order matched event). * * For taker order trade, it is calculated by taker fee rate. * For maker order trade, it is calculated by maker fee rate. * * For \"Buy\" order trade, it is base currency. * For \"Sell\" order trade, it is quote currency. */ private BigDecimal tradeFee; /** * Filled amount of base currency. */ private BigDecimal filledAmount; /** * Filled funds of quote currency. */ private BigDecimal filledFunds; } Trade Details Topic trade.$product $product : product name or * for all products. Arguments address : user address. Update Content public class UserTrade { /** * Trade ID. */ private long id; /** * Product ID. */ private int productId; /** * Order ID. */ private long orderId; /** * Order type: \"Limit\", \"Market\". */ private OrderType orderType; /** * Order side: \"Buy\", \"Sell\". */ private OrderSide orderSide; /** * Trade price from maker order. */ private BigDecimal tradePrice; /** * Trade amount. */ private BigDecimal tradeAmount; /** * Trade fee. * * For taker order trade, it is calculated by taker fee rate. * For maker order trade, it is calculated by maker fee rate. * * For \"Buy\" order trade, it is base currency. * For \"Sell\" order trade, it is quote currency. */ private BigDecimal tradeFee; /** * Whether the trade is from taker order. */ private boolean taker; /** * Trade time, unix timestamp in milliseconds. */ private long tradeTime; }","title":"WebSocket API"},{"location":"matchflow/ws/#matchflow-websocket-api","text":"MatchFlow WebSocket API provides pub/sub way to monitor the market data and user data, including orders, trades and balance changes.","title":"MatchFlow WebSocket API"},{"location":"matchflow/ws/#general","text":"","title":"General"},{"location":"matchflow/ws/#websocket-url","text":"ws://${conflux_dex_url}/ws","title":"Websocket URL"},{"location":"matchflow/ws/#heartbeat-and-connection","text":"Websocket server will send PING heartbeat message periodically (20 seconds) with an integer number. When client receives the heartbeat message, it should response with a matching PONG message which has the same integer number. Websocket server will disconnect clients if there is no communication message (inclues PING message) in 30 seconds. On the other hand, Websocket server will periodically (20 seconds) disconnect clients if no topic subscribed.","title":"Heartbeat and Connection"},{"location":"matchflow/ws/#subscribe-to-topic","text":"To subscribe a topic, please send below message to Websocket server: { \"topic\": \"topic name\", \"sub\": true, \"arguments\": {} } The arguments is used to specify additional parameters to subscribe a topic, e.g. specify user address to subscribe Asset or Order related topics.","title":"Subscribe to Topic"},{"location":"matchflow/ws/#unsubscribe","text":"To unsubscribe, please send below message to Websocket server: { \"topic\": \"topic name\", \"sub\": false }","title":"Unsubscribe"},{"location":"matchflow/ws/#topic-response","text":"Websocket server push messages of different topics in the same format as below: { \"topic\": \"topic name\", \"timestamp\": 1582609926336, \"data\": {} } As for the data value, please refer to the Update Content that defined for each topic.","title":"Topic Response"},{"location":"matchflow/ws/#market-data","text":"","title":"Market Data"},{"location":"matchflow/ws/#best-bidoffer","text":"","title":"Best Bid/Offer"},{"location":"matchflow/ws/#topic","text":"market.$product.bbo","title":"Topic"},{"location":"matchflow/ws/#update-content","text":"public class BestBidOffer { /** * Product name. */ private String product; /** * Quote timestamp. */ private Instant quoteTime; /** * Best bid price. */ private BigDecimal bid; /** * Best bid amount. */ private BigDecimal bidAmount; /** * Best bid order count. */ private int bidCount; /** * Best ask price. */ private BigDecimal ask; /** * Best ask amount. */ private BigDecimal askAmount; /** * Best ask order count. */ private int askCount; }","title":"Update Content"},{"location":"matchflow/ws/#market-depth","text":"","title":"Market Depth"},{"location":"matchflow/ws/#topic_1","text":"market.$product.depth.$step $step : market depth aggregation level, including \"step0\", \"step1\", \"step2\", \"step3\", \"step4\" and \"step5\". For \"step0\", market depth data supports up to 150 levels. For others, market depth data supports up to 20 levels.","title":"Topic"},{"location":"matchflow/ws/#update-content_1","text":"{ \"Buy\": [{}], \"Sell\": [{}] } public class DepthPriceLevel { /** * Order price. */ private BigDecimal price; /** * Total amount in all orders. */ private BigDecimal amount; /** * Total number of all orders. */ private int count; }","title":"Update Content"},{"location":"matchflow/ws/#market-details-in-last-24-hours","text":"","title":"Market Details in Last 24 Hours"},{"location":"matchflow/ws/#topic_2","text":"market.$product.detail","title":"Topic"},{"location":"matchflow/ws/#update-content_2","text":"public class Tick implements Cloneable { /** * Tick id. (auto-generated) */ private long id; /** * Referenced product id. */ private int productId; /** * Tick granularity in minutes. */ private int granularity; /** * Tick open value. */ private BigDecimal open; /** * Tick high value. */ private BigDecimal high; /** * Tick low value. */ private BigDecimal low; /** * Tick close value. */ private BigDecimal close; /** * Total volume of base currency. */ private BigDecimal baseCurrencyVolume; /** * Total volume of quote currency. */ private BigDecimal quoteCurrencyVolume; /** * Total number of trades. */ private int count; /** * Tick creation timestamp. */ private Timestamp createTime; /** * Last update timestamp. */ private Timestamp updateTime; }","title":"Update Content"},{"location":"matchflow/ws/#market-tick","text":"","title":"Market Tick"},{"location":"matchflow/ws/#topic_3","text":"market.$product.tick.$granularity $granularity : tick granularity, including 1min, 5min, 15min, 30min, 60min, 1day, 1week and 1month.","title":"Topic"},{"location":"matchflow/ws/#update-content_3","text":"public class Tick implements Cloneable { /** * Tick id. (auto-generated) */ private long id; /** * Referenced product id. */ private int productId; /** * Tick granularity in minutes. */ private int granularity; /** * Tick open value. */ private BigDecimal open; /** * Tick high value. */ private BigDecimal high; /** * Tick low value. */ private BigDecimal low; /** * Tick close value. */ private BigDecimal close; /** * Total volume of base currency. */ private BigDecimal baseCurrencyVolume; /** * Total volume of quote currency. */ private BigDecimal quoteCurrencyVolume; /** * Total number of trades. */ private int count; /** * Tick creation timestamp. */ private Timestamp createTime; /** * Last update timestamp. */ private Timestamp updateTime; }","title":"Update Content"},{"location":"matchflow/ws/#trade-detail","text":"","title":"Trade Detail"},{"location":"matchflow/ws/#topic_4","text":"market.$product.trade.detail","title":"Topic"},{"location":"matchflow/ws/#update-content_4","text":"public class Trade { /** * Trade id. (auto-generated) */ private long id; /** * Referenced product id. */ private int productId; /** * Referenced taker order id. */ private long takerOrderId; /** * Referenced maker order id. */ private long makerOrderId; /** * Trade price from maker order. */ private BigDecimal price; /** * Trade amount. */ private BigDecimal amount; /** * Taker order side: \"Buy\", \"Sell\". */ private OrderSide side; /** * Trade fee of taker side. * For \"Buy\" order, it is base currency. * For \"Sell\" order, it is quote currency. */ private BigDecimal takerFee; /** * Trade fee of maker side. * For \"Buy\" order, it is base currency. * For \"Sell\" order, it is quote currency. */ private BigDecimal makerFee; /** * Settlement status: \"OffChainSettled\", \"OnChainSettled\", \"OnChainConfirmed\". */ private SettlementStatus status = SettlementStatus.OffChainSettled; /** * Transaction hash of settlement on blockchain. */ private String txHash; /** * Transaction nonce of settlement on blockchain. */ private long txNonce; /** * Create timestamp. */ private Timestamp createTime = Timestamp.from(Instant.now()); /** * Update timestamp. */ private Timestamp updateTime = this.createTime; }","title":"Update Content"},{"location":"matchflow/ws/#asset-and-order","text":"","title":"Asset and Order"},{"location":"matchflow/ws/#account-updates","text":"","title":"Account Updates"},{"location":"matchflow/ws/#topic_5","text":"accounts","title":"Topic"},{"location":"matchflow/ws/#arguments","text":"address : user address. model : trigger mode in integer type. 0: Only update when account balance changed; 1: Update when either account balance changed or available balance changed.","title":"Arguments"},{"location":"matchflow/ws/#update-content_5","text":"public class BalanceChange { /** * Balance change type, including \"OrderPlace\", \"OrderMatch\", \"OrderCancel\", * \"Deposit\", \"Withdraw\" and \"Transfer\". */ private BalanceChangeType type; /** * The account id of the changed balance. */ private long accountId; /** * The currency name of the changed balance. */ private String currency; /** * Account balance (only exists when account balance changed). */ private BigDecimal balance; /** * Available balance (only exists when available balance changed). */ private BigDecimal available; /** * Change time, unix timestamp in milliseconds. */ private long changeTime; }","title":"Update Content"},{"location":"matchflow/ws/#order-updates","text":"","title":"Order Updates"},{"location":"matchflow/ws/#topic_6","text":"order.$product $product : product name or * for all products.","title":"Topic"},{"location":"matchflow/ws/#arguments_1","text":"address : user address.","title":"Arguments"},{"location":"matchflow/ws/#update-content_6","text":"public class OrderChange { /** * Changed order ID. */ private long id; /** * Optional client defined order identity, which is unique for a user. */ private String clientOrderId; /** * Product ID of the changed order. */ private int productId; /** * Order type: \"Limit\", \"Market\". */ private OrderType type; /** * Order side: \"Buy\", \"Sell\". */ private OrderSide side; /** * Order status: \"New\", \"Open\", \"Cancelling\", \"Cancelled\", \"Filled\". */ private OrderStatus status; /** * Order price for \"Limit\" order type only. */ private BigDecimal price; /** * Order amount for \"Limit\" order type or \"Market-Sell\" order. * For \"Market-Buy\" order, it is the total order value. */ private BigDecimal amount; /** * For order matched event, it indicates whether it is a taker order. * For order status changed event, it is true by default. */ private boolean taker; /** * Trade price (only exists for order matched event). */ private BigDecimal tradePrice; /** * Trade amount (only exists for order matched event). */ private BigDecimal tradeAmount; /** * Trade fee (only exists for order matched event). * * For taker order trade, it is calculated by taker fee rate. * For maker order trade, it is calculated by maker fee rate. * * For \"Buy\" order trade, it is base currency. * For \"Sell\" order trade, it is quote currency. */ private BigDecimal tradeFee; /** * Filled amount of base currency. */ private BigDecimal filledAmount; /** * Filled funds of quote currency. */ private BigDecimal filledFunds; }","title":"Update Content"},{"location":"matchflow/ws/#trade-details","text":"","title":"Trade Details"},{"location":"matchflow/ws/#topic_7","text":"trade.$product $product : product name or * for all products.","title":"Topic"},{"location":"matchflow/ws/#arguments_2","text":"address : user address.","title":"Arguments"},{"location":"matchflow/ws/#update-content_7","text":"public class UserTrade { /** * Trade ID. */ private long id; /** * Product ID. */ private int productId; /** * Order ID. */ private long orderId; /** * Order type: \"Limit\", \"Market\". */ private OrderType orderType; /** * Order side: \"Buy\", \"Sell\". */ private OrderSide orderSide; /** * Trade price from maker order. */ private BigDecimal tradePrice; /** * Trade amount. */ private BigDecimal tradeAmount; /** * Trade fee. * * For taker order trade, it is calculated by taker fee rate. * For maker order trade, it is calculated by maker fee rate. * * For \"Buy\" order trade, it is base currency. * For \"Sell\" order trade, it is quote currency. */ private BigDecimal tradeFee; /** * Whether the trade is from taker order. */ private boolean taker; /** * Trade time, unix timestamp in milliseconds. */ private long tradeTime; }","title":"Update Content"},{"location":"shuttleflow/","text":"Conflux Shuttleflow Shuttleflow is Conflux cross chain solution to integrate user assets from bitcoin and ethereum. It provides following cross chain functionalities: * Support assets cross chain migration between conflux and bitcoin/ethereum/erc20 token. * Enable anybody to add new cross chain erc20 token. * Wrapping cross chain migration from ethereum defi to conflux defi(vice versa) to an atomic operation. Terminologies Cross chain asset(reference token) : The external chain asset that can be migrated to conflux chain by shuttleflow. Such as BTC, ETH, USDT. cToken(Conflux Token) : An ERC777 token on conflux backed 1:1 by tokens from other blockchain. e.g. 1 cBTC is backed by 1 bitcoin. User : The people who want to transfer assets from other blockchain to Conflux using shuttleflow. Token Sponsor : The sponsor of a specific cross chain asset. When user want to add a new erc20 to cross chain assets, he/she need to become the sponsor of that erc20 token, meanwhile some cETH should be mortgaged by the sponsor to conflux cross chain smart contract, which is used to reimburse the cross chain ethereum transaction fee of custodian alliance, the sponsor will be able to obtain and configure the mint/burn operation fee for user who want to migrate the corresponding erc20 token. Payment Wallet(Receive Wallet) : For a conflux address X , there is a corresponding smart contract P on ethereum which is the payment wallet for X . If someone transferred A ETH to C , the custodian alliance will mint A cETH for X . On bitcoin, the payment wallet is a special multi-sig wallet. Custodian Member : A member of custodian alliance, holds 6 private keys: hot/cold wallet of conflux/ethereum/bitcoin chain. Custodian Node : Custodian service run independently by each custodian member, which hosts the hot wallet private key of custodian member, monitor the blockchain data and sign user's mint/burn requests, settle the mint/burn transactions on chain automatically when more than 2/3 signatures are collected. Custodian Alliance : A group of custodian members. Custodian alliance is able to mint/burn cToken for users when signatures from more than 2/3 custodian members are collected. It also maintain hot & cold wallet to manage users' cross chain assets. Custodian Hot Wallet : The multisig wallets of custodian alliance controlled by hot wallet private key of custodian members, which hold the users assets from other blockchain (the assets transferred to payment wallets). Custodian Cold Wallet : The multisig wallets of custodian alliance controlled by cold wallet private key of custodian members. When amount of assets in alliance hot wallet is larger than upper bound, the part exceed the bound will be moved to cold wallet. Architecture The workflow for a end user who want to use shuttleflow, they just need 3 steps: 1. Get the payment wallet address. 2. Transfer assets(BTC/ETH/ERC20) to payment wallet. 3. Check balance in conflux wallet(or assgined Defi) after custodian alliance processed user's request. The detail operations between step 2 and 3 is demonstrated in the right part of the architecture: 1. Custodian alliance monitor the transactions/contract events on bitcoin/ethereum, discover the user payment and wait for it confirming. 2. For a confirmed user payment, the custodian alliance will retrieve the assets in user's payment wallet to custodian hot wallet, and mint corresponding cToken for user. This is made by custodian nodes run by custodian alliance automatically. 3. User is able to use cToken to experience Defi product on conflux chain, such as Boomflow. This rest document is organized as in the following sections: * Shuttleflow Contracts * Custodian Node (under development) * JSON RPC * Conflux Cross Chain SDK","title":"Introduction"},{"location":"shuttleflow/#conflux-shuttleflow","text":"Shuttleflow is Conflux cross chain solution to integrate user assets from bitcoin and ethereum. It provides following cross chain functionalities: * Support assets cross chain migration between conflux and bitcoin/ethereum/erc20 token. * Enable anybody to add new cross chain erc20 token. * Wrapping cross chain migration from ethereum defi to conflux defi(vice versa) to an atomic operation.","title":"Conflux Shuttleflow"},{"location":"shuttleflow/#terminologies","text":"Cross chain asset(reference token) : The external chain asset that can be migrated to conflux chain by shuttleflow. Such as BTC, ETH, USDT. cToken(Conflux Token) : An ERC777 token on conflux backed 1:1 by tokens from other blockchain. e.g. 1 cBTC is backed by 1 bitcoin. User : The people who want to transfer assets from other blockchain to Conflux using shuttleflow. Token Sponsor : The sponsor of a specific cross chain asset. When user want to add a new erc20 to cross chain assets, he/she need to become the sponsor of that erc20 token, meanwhile some cETH should be mortgaged by the sponsor to conflux cross chain smart contract, which is used to reimburse the cross chain ethereum transaction fee of custodian alliance, the sponsor will be able to obtain and configure the mint/burn operation fee for user who want to migrate the corresponding erc20 token. Payment Wallet(Receive Wallet) : For a conflux address X , there is a corresponding smart contract P on ethereum which is the payment wallet for X . If someone transferred A ETH to C , the custodian alliance will mint A cETH for X . On bitcoin, the payment wallet is a special multi-sig wallet. Custodian Member : A member of custodian alliance, holds 6 private keys: hot/cold wallet of conflux/ethereum/bitcoin chain. Custodian Node : Custodian service run independently by each custodian member, which hosts the hot wallet private key of custodian member, monitor the blockchain data and sign user's mint/burn requests, settle the mint/burn transactions on chain automatically when more than 2/3 signatures are collected. Custodian Alliance : A group of custodian members. Custodian alliance is able to mint/burn cToken for users when signatures from more than 2/3 custodian members are collected. It also maintain hot & cold wallet to manage users' cross chain assets. Custodian Hot Wallet : The multisig wallets of custodian alliance controlled by hot wallet private key of custodian members, which hold the users assets from other blockchain (the assets transferred to payment wallets). Custodian Cold Wallet : The multisig wallets of custodian alliance controlled by cold wallet private key of custodian members. When amount of assets in alliance hot wallet is larger than upper bound, the part exceed the bound will be moved to cold wallet.","title":"Terminologies"},{"location":"shuttleflow/#architecture","text":"The workflow for a end user who want to use shuttleflow, they just need 3 steps: 1. Get the payment wallet address. 2. Transfer assets(BTC/ETH/ERC20) to payment wallet. 3. Check balance in conflux wallet(or assgined Defi) after custodian alliance processed user's request. The detail operations between step 2 and 3 is demonstrated in the right part of the architecture: 1. Custodian alliance monitor the transactions/contract events on bitcoin/ethereum, discover the user payment and wait for it confirming. 2. For a confirmed user payment, the custodian alliance will retrieve the assets in user's payment wallet to custodian hot wallet, and mint corresponding cToken for user. This is made by custodian nodes run by custodian alliance automatically. 3. User is able to use cToken to experience Defi product on conflux chain, such as Boomflow. This rest document is organized as in the following sections: * Shuttleflow Contracts * Custodian Node (under development) * JSON RPC * Conflux Cross Chain SDK","title":"Architecture"},{"location":"shuttleflow/custodian_core/","text":"CustodianCore CustodianCore is the governance contract of custodian alliance on Conflux chain. It maintains the information of custodian members and configurations for custodian nodes, including: * Custodian member's address/public key of different chain * The address of all cTokens and their configurations such as mint/burn fee * The information of token sponsors * The upper/lower bounds of custodian alliance's bitcoin hot wallet Ownership and authorities: * At this point, the owner of CustodianCore is Conflux admin, who is enabled to modify custodian node configurations and custodian membership. * CustodianCore is the owner of all cToken so only it has the authority to mint cTokens. Upgrade: * Custodian core follows proxy delegate pattern which enables upgrading contract logic without modification of contract address and get rid of data migration. Core Storage Variables ITokenBase[] public token_list; Registered cTokens. mapping(address => string) public token_reference; Mapping of cToken address to external chain assets(reference), reference can be 'eth'/'btc'/lowercase erc20 address. For example, cETH address => 'eth', cBTC address => 'btc', cUSDT address => '0xdac17f958d2ee523a2206206994597c13d831ec7'. mapping(address => uint8) public token_decimals; Mapping of cToken address to external chain decimals. For example, cETH address => 18, cBTC address => 8, cUSDT address => 6. mapping(string => bool) public admin_token; Denote each cToken is admin token or not. Admin token can only be sponsored by whitelist admin of custodian core contract, and will maintain both hot and cold wallet. For non-admin token, anyone can be its sponsor and only hot wallet will be maintained. mapping(string => address) reference_token; // inverse token_reference Anti mapping of token_reference . mapping(string => uint256) public burn_fee; The fee taken from user during cToken burn. Note the decimals is decimals of the reference token. For example, the sponsor want to take 0.1 cUSDT when user burn cUSDT, here burn_fee['usdt'] should be 0.1 * 1e6. mapping(string => uint256) public mint_fee; The fee taken from user during cToken mint. Note the decimals is decimals of the reference token. mapping(string => uint256) public wallet_fee; When a user want to migrate token from ethereum to conflux, his/her receive wallet will be deployed firstly if it is not deployed before. wallet_fee denote the fee taken from user during deployment of receive wallet. Note the decimals is decimals of the reference token. mapping(string => uint256) public minimal_mint_value; The remaining value of reference token in user's receive wallet must be larger than minimal mint value, otherwise the custodian alliance will not mint for it. Note : for btc, use btc_minimal_mint_value . uint256 public btc_minimal_mint_value cBTC minimal mint value. mapping(string => uint256) public minimal_burn_value; The minimal burn value of corresponding cToken, the burn will fail if burn value is not enough. Note : for btc, use btc_minimal_burn_value . uint256 public btc_minimal_burn_value; cBTC minimal burn value. mapping(string => uint256) public minimal_burn_value; The minimal burn value of corresponding cToken, the burn will fail if burn value is not enough. mapping(string => uint256) public token_cooldown; // second This can only set by custodian core whitelist admin. The token spnosor should not change the token parameters frequently, so the sponsor must wait a cooldown after the token parameters is changed. Core Functions: function sponsorToken( string memory ref, // lowercase erc20 ethereum address uint256 amount, // amount of cETH mortgaged uint256 _burn_fee, // burn fee of erc20 token, in erc20 decimals uint256 _mint_fee, // mint fee of erc20 token, in erc20 decimals uint256 _wallet_fee, // receive wallet fee of erc20 token, in erc20 decimals uint256 _minimal_mint_value, // minimal mint value of erc20 token, in erc20 decimals uint256 _minimal_burn_value // minimal burn value of erc20 token, in erc20 decimals ) public; This function can be called by anyone. This function helps msg.sender become the sponsor of an erc20 token, specified by ref . The governance contract will transfer amount cETH from msg.sender by operator authority, and compare the amount to the current sponsor of ref (if exists), the sponsor will be replaced by msg.sender if amount is large enough. The token parameters of ref will also be replaced by the parameters sender provided, if the token is not in cooldown. For more information of sponsor replacement logic, see token sponsor . function setTokenParams( string memory ref, // lowercase erc20 ethereum address uint256 _burn_fee, uint256 _mint_fee, uint256 _wallet_fee, uint256 _minimal_mint_value, uint256 _minimal_burn_value ) public; This function can be called by anyone. This function helps the sponsor of token ref to change the token parameters if the token is not in cooldown. function mint( address defi, // conflux defi goverance contract address address token, // cToken address address to, // user conflux address uint256 amount, // user mint address uint256 fee, // user mint fee string memory tx_id, // corresponding ethereum/bitcoin mint transaction hash bytes[] memory signatures // signatures of custodian members ) public; This function can only be called by custodian member's hot wallet address. Mint cToken for a user and then send the minted cToken to receive smart contract of specific defi(if user assgined) with default operator authority. This functions needs over 2/3 signatures from current custodian members. The parameter defi is determined by user's receive wallet, when defi is zero address or assgined defi does not support assgined token, the cToken will be left in user's conflux address. For example, when defi is Boomflow contract and token is cETH address, the custodian alliance will firstly mint corresponding amount of cETH to user's conflux address, and then operator send these cETH to CRCL-ETH address. Then cETH will be locked in CRCL-ETH address and DEX-ETH will be minted to user.","title":"Custodian core"},{"location":"shuttleflow/custodian_core/#custodiancore","text":"CustodianCore is the governance contract of custodian alliance on Conflux chain. It maintains the information of custodian members and configurations for custodian nodes, including: * Custodian member's address/public key of different chain * The address of all cTokens and their configurations such as mint/burn fee * The information of token sponsors * The upper/lower bounds of custodian alliance's bitcoin hot wallet Ownership and authorities: * At this point, the owner of CustodianCore is Conflux admin, who is enabled to modify custodian node configurations and custodian membership. * CustodianCore is the owner of all cToken so only it has the authority to mint cTokens. Upgrade: * Custodian core follows proxy delegate pattern which enables upgrading contract logic without modification of contract address and get rid of data migration.","title":"CustodianCore"},{"location":"shuttleflow/custodian_core/#core-storage-variables","text":"ITokenBase[] public token_list; Registered cTokens. mapping(address => string) public token_reference; Mapping of cToken address to external chain assets(reference), reference can be 'eth'/'btc'/lowercase erc20 address. For example, cETH address => 'eth', cBTC address => 'btc', cUSDT address => '0xdac17f958d2ee523a2206206994597c13d831ec7'. mapping(address => uint8) public token_decimals; Mapping of cToken address to external chain decimals. For example, cETH address => 18, cBTC address => 8, cUSDT address => 6. mapping(string => bool) public admin_token; Denote each cToken is admin token or not. Admin token can only be sponsored by whitelist admin of custodian core contract, and will maintain both hot and cold wallet. For non-admin token, anyone can be its sponsor and only hot wallet will be maintained. mapping(string => address) reference_token; // inverse token_reference Anti mapping of token_reference . mapping(string => uint256) public burn_fee; The fee taken from user during cToken burn. Note the decimals is decimals of the reference token. For example, the sponsor want to take 0.1 cUSDT when user burn cUSDT, here burn_fee['usdt'] should be 0.1 * 1e6. mapping(string => uint256) public mint_fee; The fee taken from user during cToken mint. Note the decimals is decimals of the reference token. mapping(string => uint256) public wallet_fee; When a user want to migrate token from ethereum to conflux, his/her receive wallet will be deployed firstly if it is not deployed before. wallet_fee denote the fee taken from user during deployment of receive wallet. Note the decimals is decimals of the reference token. mapping(string => uint256) public minimal_mint_value; The remaining value of reference token in user's receive wallet must be larger than minimal mint value, otherwise the custodian alliance will not mint for it. Note : for btc, use btc_minimal_mint_value . uint256 public btc_minimal_mint_value cBTC minimal mint value. mapping(string => uint256) public minimal_burn_value; The minimal burn value of corresponding cToken, the burn will fail if burn value is not enough. Note : for btc, use btc_minimal_burn_value . uint256 public btc_minimal_burn_value; cBTC minimal burn value. mapping(string => uint256) public minimal_burn_value; The minimal burn value of corresponding cToken, the burn will fail if burn value is not enough. mapping(string => uint256) public token_cooldown; // second This can only set by custodian core whitelist admin. The token spnosor should not change the token parameters frequently, so the sponsor must wait a cooldown after the token parameters is changed.","title":"Core Storage Variables"},{"location":"shuttleflow/custodian_core/#core-functions","text":"function sponsorToken( string memory ref, // lowercase erc20 ethereum address uint256 amount, // amount of cETH mortgaged uint256 _burn_fee, // burn fee of erc20 token, in erc20 decimals uint256 _mint_fee, // mint fee of erc20 token, in erc20 decimals uint256 _wallet_fee, // receive wallet fee of erc20 token, in erc20 decimals uint256 _minimal_mint_value, // minimal mint value of erc20 token, in erc20 decimals uint256 _minimal_burn_value // minimal burn value of erc20 token, in erc20 decimals ) public; This function can be called by anyone. This function helps msg.sender become the sponsor of an erc20 token, specified by ref . The governance contract will transfer amount cETH from msg.sender by operator authority, and compare the amount to the current sponsor of ref (if exists), the sponsor will be replaced by msg.sender if amount is large enough. The token parameters of ref will also be replaced by the parameters sender provided, if the token is not in cooldown. For more information of sponsor replacement logic, see token sponsor . function setTokenParams( string memory ref, // lowercase erc20 ethereum address uint256 _burn_fee, uint256 _mint_fee, uint256 _wallet_fee, uint256 _minimal_mint_value, uint256 _minimal_burn_value ) public; This function can be called by anyone. This function helps the sponsor of token ref to change the token parameters if the token is not in cooldown. function mint( address defi, // conflux defi goverance contract address address token, // cToken address address to, // user conflux address uint256 amount, // user mint address uint256 fee, // user mint fee string memory tx_id, // corresponding ethereum/bitcoin mint transaction hash bytes[] memory signatures // signatures of custodian members ) public; This function can only be called by custodian member's hot wallet address. Mint cToken for a user and then send the minted cToken to receive smart contract of specific defi(if user assgined) with default operator authority. This functions needs over 2/3 signatures from current custodian members. The parameter defi is determined by user's receive wallet, when defi is zero address or assgined defi does not support assgined token, the cToken will be left in user's conflux address. For example, when defi is Boomflow contract and token is cETH address, the custodian alliance will firstly mint corresponding amount of cETH to user's conflux address, and then operator send these cETH to CRCL-ETH address. Then cETH will be locked in CRCL-ETH address and DEX-ETH will be minted to user.","title":"Core Functions:"},{"location":"shuttleflow/defi_relayer/","text":"DefiRelayer Contract code see DefiRelayer.sol","title":"Defi relayer"},{"location":"shuttleflow/defi_relayer/#defirelayer","text":"","title":"DefiRelayer"},{"location":"shuttleflow/defi_relayer/#contract-code","text":"see DefiRelayer.sol","title":"Contract code"},{"location":"shuttleflow/eth_factory/","text":"EthFactory EthFactory (contracts/factory/EthFactory.sol) is the governance contract of custodian alliance on Ethereum chain. It maintains the information of custodian members and configurations for custodian nodes, including: * Custodian member's ethereum address * The registered defi relayer contracts. * The upper/lower bounds of custodian alliance's eth&erc20 hot wallet Ownership and authorities: * At this point, the owner of EthFactory is Conflux admin, who is enabled to modify custodian node configurations and custodian membership. * CustodianCore is the owner of all cToken so only it has the authority to mint cTokens. Upgrade: * EthFactory follows proxy delegate pattern which enables upgrading contract logic without modification of contract address and get rid of data migration. Core Functions: function burn( address token, address payable toAddress, address payable defi_relayer, uint256 amount, string memory tx_id, bytes[] memory signatures ) public; Only custodian member can call it. Withdraw eth/erc20 token to user's address. This functions needs over 2/3 signatures from current custodian members. If provided defi_relayer is registered, the token will be sent to defi_relayer by calling its deposit for depositToken . Specifically, if token is zero address(denote ETH) and defi_relayer is not used, the withdrawed eth will be firstly sent to the msg.sender (custodian member who settled this burn request), and then msg.sender will send these ETH to toAddress (user address). This avoids some user withdraw ETH directly to the address of some centralized exchange, which is not able to detect the internal ETH transaction in a contract call. ReceiveWallet ReceiveWallet (or payment wallet) is the contract of receive wallet of custodian alliance for user. The receive wallet can only transfer eth/erc20 token to the address of EthFactory, which is initialized when receive wallet contract construction and can not be modified in future. Core Functions: function retrieve( address token, // erc20 address or zero address for ETH uint256 deploy_fee, uint256 retrieve_fee ) public; Only custodian member or Create2Factory contract can call it. Transfer all eth/erc20 token to EthFactory contract. Where deploy_fee is the fee for deployment of receive wallet, retrieve_fee is the fee for custodian member to move these token from user's receive wallet to hot wallet(governance contract). Create2Factory Create2Factory is the generator of user payment wallet. It can calculate the address of payment wallet of a specific user conflux address before the payment wallet contract is really deployed. This contract enable the custodian alliance provide the payment wallet address to user and deploy the payment wallet contract after they received at least one payment from user. function deploy( bytes memory code, uint256 salt, address token, uint256 deploy_fee, uint256 retrieve_fee ) public; Only custodian member can call it. Deploy the receive wallet of user for specific defi(encoded in salt ), and call the retrieve function of the receive wallet deployed, with deploy_fee.","title":"Eth factory"},{"location":"shuttleflow/eth_factory/#ethfactory","text":"EthFactory (contracts/factory/EthFactory.sol) is the governance contract of custodian alliance on Ethereum chain. It maintains the information of custodian members and configurations for custodian nodes, including: * Custodian member's ethereum address * The registered defi relayer contracts. * The upper/lower bounds of custodian alliance's eth&erc20 hot wallet Ownership and authorities: * At this point, the owner of EthFactory is Conflux admin, who is enabled to modify custodian node configurations and custodian membership. * CustodianCore is the owner of all cToken so only it has the authority to mint cTokens. Upgrade: * EthFactory follows proxy delegate pattern which enables upgrading contract logic without modification of contract address and get rid of data migration.","title":"EthFactory"},{"location":"shuttleflow/eth_factory/#core-functions","text":"function burn( address token, address payable toAddress, address payable defi_relayer, uint256 amount, string memory tx_id, bytes[] memory signatures ) public; Only custodian member can call it. Withdraw eth/erc20 token to user's address. This functions needs over 2/3 signatures from current custodian members. If provided defi_relayer is registered, the token will be sent to defi_relayer by calling its deposit for depositToken . Specifically, if token is zero address(denote ETH) and defi_relayer is not used, the withdrawed eth will be firstly sent to the msg.sender (custodian member who settled this burn request), and then msg.sender will send these ETH to toAddress (user address). This avoids some user withdraw ETH directly to the address of some centralized exchange, which is not able to detect the internal ETH transaction in a contract call.","title":"Core Functions:"},{"location":"shuttleflow/eth_factory/#receivewallet","text":"ReceiveWallet (or payment wallet) is the contract of receive wallet of custodian alliance for user. The receive wallet can only transfer eth/erc20 token to the address of EthFactory, which is initialized when receive wallet contract construction and can not be modified in future. Core Functions: function retrieve( address token, // erc20 address or zero address for ETH uint256 deploy_fee, uint256 retrieve_fee ) public; Only custodian member or Create2Factory contract can call it. Transfer all eth/erc20 token to EthFactory contract. Where deploy_fee is the fee for deployment of receive wallet, retrieve_fee is the fee for custodian member to move these token from user's receive wallet to hot wallet(governance contract).","title":"ReceiveWallet"},{"location":"shuttleflow/eth_factory/#create2factory","text":"Create2Factory is the generator of user payment wallet. It can calculate the address of payment wallet of a specific user conflux address before the payment wallet contract is really deployed. This contract enable the custodian alliance provide the payment wallet address to user and deploy the payment wallet contract after they received at least one payment from user. function deploy( bytes memory code, uint256 salt, address token, uint256 deploy_fee, uint256 retrieve_fee ) public; Only custodian member can call it. Deploy the receive wallet of user for specific defi(encoded in salt ), and call the retrieve function of the receive wallet deployed, with deploy_fee.","title":"Create2Factory"},{"location":"shuttleflow/json_rpc/","text":"JSON-RPC Methods getHotWalletBalance Get the hot wallet balance of specified token. Parameters (1) token: (string) Returns String Example $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getHotWalletBalance\",\"params\":[\"btc\"],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": 0.00281705 } getColdWalletBalance Get the cold wallet balance of specified token. Parameters (1) token: (string) Returns String Example $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getColdWalletBalance\",\"params\":[\"btc\"],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": 0 } getProfitWalletBalance Get the profit wallet balance of specified token. Parameters (1) token: (string) Returns Number Example $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getProfitWalletBalance\",\"params\":[\"eth\"],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": \"0\" } getWalletAddress Get the wallet address url for different token. Parameters None. Returns JSON object:\\ {\\ token_name: (JSON object)\\ {\\ \"hot_wallet\": (String) url of wallet,\\ \"cold_wallet\": (String) url of wallet,\\ \"profit_wallet\": (String) url of wallet,\\ \"personal_wallet\": (String) url of wallet,\\ }\\ } Example $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getWalletAddress\",\"params\":[],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"btc\": { \"hot_wallet\": \"https://blockstream.info/testnet/address/2MsPJwNqdeUHvxM3munWBxtCE2WncF9PKbZ\", \"cold_wallet\": \"https://blockstream.info/testnet/address/2N5d2CVouyjaF8thM9anTTcJFyHvhF2AdRS\", \"profit_wallet\": \"https://blockstream.info/testnet/address/2N9rEmrpFA1b7HKZiDghnNEmTy6MDrgV3aC\", \"personal_wallet\": \"https://blockstream.info/testnet/address/mhMHPARYGwa4gki9bjtyZnSWAX7ApfjhuR\" }, \"eth\": { \"hot_wallet_address\": \"https://rinkeby.etherscan.io/address/0x81632943BA6395d5E998393343e2Bb47c9f8Aa18\", \"cold_wallet_address\": \"https://rinkeby.etherscan.io/address/0x81632943BA6395d5E998393343e2Bb47c9f8Aa18\", \"profit_wallet_address\": \"https://rinkeby.etherscan.io/address/0x81632943BA6395d5E998393343e2Bb47c9f8Aa18\", \"personal_address\": \"https://rinkeby.etherscan.io/address/0x6B6C3A1eC5C689C3dd158b1a6E8Bc722373a2BfA\" }, \"usdt\": { \"hot_wallet_address\": \"https://rinkeby.etherscan.io/token/0xd5185bF8E6F0706aBED0a4025bA4969197c8166B?a=0x81632943BA6395d5E998393343e2Bb47c9f8Aa18\", \"cold_wallet_address\": \"https://rinkeby.etherscan.io/token/0xd5185bF8E6F0706aBED0a4025bA4969197c8166B?a=0x81632943BA6395d5E998393343e2Bb47c9f8Aa18\", \"profit_wallet_address\": \"https://rinkeby.etherscan.io/token/0xd5185bF8E6F0706aBED0a4025bA4969197c8166B?a=0x81632943BA6395d5E998393343e2Bb47c9f8Aa18\", \"personal_address\": \"https://rinkeby.etherscan.io/token/0xd5185bF8E6F0706aBED0a4025bA4969197c8166B?a=0x6B6C3A1eC5C689C3dd158b1a6E8Bc722373a2BfA\" } } } verifyBalance verify the balance of a specified token. Parameters (1) token: (string) Returns JSON object:\\ {\\ hot: (string) hot wallet balance,\\ cold: (string) cold wallet balance,\\ total: (string) cToken total supply,\\ success: (bool) verification result,\\ } Example $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"verifyBalance\",\"params\":[\"btc\"],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"hot\": \"0\", \"cold\": \"0.0203324\", \"total\": \"0.005\", \"success\": false } } getColdTransferHashBtc Get the hash of bitcoin operation which need private key of cold wallet. Parameters (1) type: (string), \"ColdToHot\"|\"ColdTransfer\"|\"ProfitTransfer\"|\"SplitProfit\",\\ (2) amount: (string | number), Optional (only \"ColdToHot\" | \"SplitProfit\") Returns JSON object:\\ {\\ digest:(array of array of string) hash of each utxos used to sign,\\ hash:(string) internal transaction hash, } Example $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getColdTransferHashBtc\",\"params\":[\"ColdToHot\",\"100000\"],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"hash\": \"c051866e922c9d0eee16b075791fc71076c55b0e7c7da2f03cebc41ff3f234e0#1\", \"digests\": [ [\"7d6b239bab77e06a7814e07653ce0b746b559a101f4958dccd5cab0e8801c00c\"] ] } } $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getColdTransferHashBtc\",\"params\":[\"SplitProfit\",\"100000\"],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"hash\": \"SplitProfit@2N9rEmrpFA1b7HKZiDghnNEmTy6MDrgV3aC@@0x186a0#1\", \"digests\": [ [\"298b25483820fddf35a3930422690f8a5053fb3ffa9ec660627a39ed78bec3d7\"] ] } } getColdTransferHashEth Get the hash of eth/erc20 token operation which need private key of cold wallet. Parameters (1) type: (string), \"ColdToHot\"|\"SplitProfit\",\\ (2) token: (string)\\ (3) amount: (string | number) Returns JSON object:\\ {\\ token:(string),\\ amount:(string),\\ nonce:(string), operation nonce, \\ hash:(string), internal transaction hash,\\ } Example $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getColdTransferHashEth\",\"params\":[\"ColdToHot\",\"eth\",\"100000\"],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"token\": \"eth\", \"amount\": \"0x186a0\", \"nonce\": \"0\", \"hash\": \"0xecf1cd87d27cbd0785da88625b7c414ed1954fd8abb3a427f295537152fdeed2\" } } signColdTransferBtc sign the bitcoin transfer cold wallet to another address request. Parameters (1) type:(string) \"ColdToHot\"|\"ColdTransfer\"|\"ProfitTransfer\"|\"SplitProfit\",\\ (2) amount: (string | number), Optional (only \"ColdToHot\" | \"SplitProfit\"),\\ (3) hash:(string) internal transaction hash to sign\\ (4) signatures:(array of array of string) signature of each utxos used (5) signer:(string) signer's public key Returns \"sign successfully\" | Error Message (string) Example $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"signColdTransferBtc\",\"params\":[\"ColdToHot\",\"100000\",\"c051866e922c9d0eee16b075791fc71076c55b0e7c7da2f03cebc41ff3f234e0#1\",[[\"7d6b239bab77e06a7814e07653ce0b746b559a101f4958dccd5cab0e8801c00c\"]]],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": \"sign successfully\" } $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"signColdTransferBtc\",\"params\":[\"SplitProfit\",\"100000\",\"SplitProfit@2N9rEmrpFA1b7HKZiDghnNEmTy6MDrgV3aC@@0x186a0#1\",[[\"304402202c645b25cc329d2b8adb82c7ee0aca60e28e132bc8ac500efd18aa5229b9531b02201a4972bda60aeaddd489d0774d3b2648a3384c2767dbb6ee1a395941e241909301\"]]],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": \"sign successfully\" } signColdTransferEth sign the ethereum or erc20 token transfer cold wallet to another address request. Parameters (1) type: (string), \"ColdToHot\"|\"SplitProfit\",\\ (2) token:(string) token name or erc20 or eth,\\ (3) amount:(string),\\ (4) nonce:(string), operation nonce,\\ (5) hash:(string), internal transaction hash,\\ (6) signature:(string), signature of hash (7) signer:(string), signer's public key Returns \"sign successfully\" | Error Message (string) Example $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"signColdTransferEth\",\"params\":[\"ColdToHot\",\"eth\",\"100000\",\"0\",\"0xecf1cd87d27cbd0785da88625b7c414ed1954fd8abb3a427f295537152fdeed2\",\"0x6df962201a0372d415d79ef6b8cfde457ea2f6a352651f0b189c6d114615a4cb6a9c298fe36b9954bc55a6e42295a8c6720a0aec0d4d85b0c82db1d6e10d1c741b\"],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": \"sign successfully\" } getMemberChangeInfo Get last member change information. Parameters None. Returns JSON object:\\ {\\ info:(JSON object) Member change detail:\\ {\\ epoch:(Number),\\ changes:(array of JSON object) [{,\\ member:(string),\\ operation:(string) \"add\" | \"remove\",\\ }...]\\ }\\ address_change:(JSON object) bitcoin address change detail:\\ {\\ last_hot_address:(string),\\ last_cold_address:(string),\\ last_profit_address:(string),\\ hot_address:(string),\\ cold_address:(string),\\ profit_address:(string),\\ }\\ } Example $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getMemberChangeInfo\",\"params\":[],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"info\": { \"epoch\": 200924, \"changes\": [{ \"member\": \"0x81f3521d71990945B99e1C592750D7157F2b544f\", \"operation\": \"remove\" }, { \"member\": \"0x65CF2b2c91e6eff901F10ab7363ae58cf1bfCCc5\", \"operation\": \"remove\" }, { \"member\": \"0x81f3521d71990945b99e1c592750d7157f2b544f\", \"operation\": \"add\" }, { \"member\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"operation\": \"add\" }, { \"member\": \"0x2338f8646aeaa5a32d374fae49ee7aae6bca1efc\", \"operation\": \"add\" }] }, \"address_change\": { \"last_hot_address\": \"2MsPJwNqdeUHvxM3munWBxtCE2WncF9PKbZ\", \"last_cold_address\": \"2N5d2CVouyjaF8thM9anTTcJFyHvhF2AdRS\", \"last_profit_address\": \"2N9rEmrpFA1b7HKZiDghnNEmTy6MDrgV3aC\", \"cold_address\": \"2MyP3jysyz1GTeD6VHPZ6Wqs5SkNc2VkNBb\", \"profit_address\": \"2N7tUaxmwq9rwtXZUYymiYXnn9s7Vd2hMZp\", \"hot_address\": \"2N7UpxpCo6gEpPdjksZPPE9GjTq8JY1KQpz\" } } } getHotColdWalletTransferList Get wallet transfer operations list between hot and cold wallet. Parameters (1) skip:(Number) the number of leading operations to be ignored\\ (2) count:(Number) the maximum number of operations to return Returns Example JSON object:\\ {\\ txs: (Array of JSON objects) transactions in requested range\\ [\\ For doing request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ need:(Number) total number of signatures needed,\\ signer:(array of string) list of members who have signed,\\ has_signed:(bool) whether current member has signed or not,\\ status:(string) \"doing\",\\ },\\ For finished request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ status:(string) \"finished\",\\ }...]\\ total: (Number) total number of transactions,\\ } Example $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getHotColdWalletTransferList\",\"params\":[0,100],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"txs\": [{ \"type\": \"eth_ColdToHot\", \"nonce_or_txid\": \"0\", \"amount\": \"100000\", \"user_addr\": \"\", \"addr\": \"\", \"signer\": [\"0x6B6C3A1eC5C689C3dd158b1a6E8Bc722373a2BfA\"], \"has_signed\": true, \"need\": 2, \"status\": \"doing\" }, { \"type\": \"eth_HotToCold\", \"nonce_or_txid\": \"0\", \"user_addr\": \"\", \"addr\": \"\", \"status\": \"finished\" }], \"total\": 2 } } getProfitSplitList Get profit split operations list. Parameters (1) skip:(Number) the number of leading operations to be ignored\\ (2) count:(Number) the maximum number of operations to return Returns JSON object:\\ {\\ txs: (Array of JSON objects) transactions in requested range\\ [\\ For doing request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ need:(Number) total number of signatures needed,\\ signer:(array of string) list of members who have signed,\\ has_signed:(bool) whether current member has signed or not,\\ status:(string) \"doing\",\\ },\\ For finished request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ status:(string) \"finished\",\\ }...]\\ total: (Number) total number of transactions,\\ } Example $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getProfitSplitList\",\"params\":[0,100],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"txs\": [{ \"type\": \"eth_SplitProfit\", \"nonce_or_txid\": \"1\", \"amount\": \"100\", \"user_addr\": \"\", \"addr\": \"\", \"status\": \"finished\" }], \"total\": 1 } } getUserOperationList Get user mint/burn operations list. Parameters (1) skip:(Number) the number of leading operations to be ignored\\ (2) count:(Number) the maximum number of operations to return Returns JSON object:\\ {\\ txs: (Array of JSON objects) transactions in requested range\\ [\\ For doing request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ need:(Number) total number of signatures needed,\\ signer:(array of string) list of members who have signed,\\ has_signed:(bool) whether current member has signed or not,\\ status:(string) \"doing\",\\ },\\ For finished request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ status:(string) \"finished\",\\ }...]\\ total: (Number) total number of transactions,\\ } Example $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getUserOperationList\",\"params\":[0,100],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"txs\": [{ \"type\": \"eth_mint\", \"nonce_or_txid\": \"0x0002a128139692f866b6a1615ce2c40ad337796fc0ca6e51cc7eb6e30baab760\", \"amount\": \"1000000000000000\", \"user_addr\": \"0x65CF2b2c91e6eff901F10ab7363ae58cf1bfCCc5\", \"to_addr\": \"0x65CF2b2c91e6eff901F10ab7363ae58cf1bfCCc5\", \"signer\": [\"fafa\"], \"has_signed\": true, \"need\": 2, \"status\": \"doing\" }, { \"type\": \"btc_mint\", \"nonce_or_txid\": \"ab68b057429271ac11a860002264c77e074d1125e3ee30d865e5276a488fad90\", \"amount\": \"100000\", \"user_addr\": \"0x81f3521d71990945b99e1c592750d7157f2b544f\", \"to_addr\": \"0x81f3521d71990945b99e1c592750d7157f2b544f\", \"status\": \"finished\" }, { \"type\": \"eth_mint\", \"nonce_or_txid\": \"0xe06818b9da4feef5cd590bd68aa23f13e29ef49354ecdd1ae18b11074bf47478\", \"amount\": \"1000000000000000\", \"user_addr\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"to_addr\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"status\": \"finished\" }, { \"type\": \"cUSDT_mint\", \"nonce_or_txid\": \"0xf1685c53cf641b330d580e9a38f783d1ad875250ffae49d182d7189c9de7907e\", \"amount\": \"100000\", \"user_addr\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"to_addr\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"status\": \"finished\" }, { \"type\": \"withdraw\", \"nonce_or_txid\": \"af6e2107fe26a54f84f234941db111afea9de9c9d1caa4d18778fcf22fe12247\", \"amount\": \"100000\", \"user_addr\": \"\", \"to_addr\": \"\", \"status\": \"finished\" }], \"total\": 5 } } getSpecificUserOperationList Get user mint/burn operations list of specific user. Parameters (1) data:(JSON Object) the query detail\\ (2) skip:(Number) the number of leading operations to be ignored\\ (3) count:(Number) the maximum number of operations to return Returns JSON object:\\ {\\ txs: (Array of JSON objects) transactions in requested range\\ [\\ For doing request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ need:(Number) total number of signatures needed,\\ signer:(array of string) list of members who have signed,\\ has_signed:(bool) whether current member has signed or not,\\ status:(string) \"doing\",\\ },\\ For finished request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ status:(string) \"finished\",\\ }...]\\ total: (Number) total number of transactions,\\ } Example $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getSpecificUserOperationList\",\"params\":[{\"address\":\"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\",\"status\":[\"doing\",\"finished\"],\"types\":[\"eth_mint\",\"erc20_mint\"]},0,100],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"txs\": [{ \"type\": \"eth_mint\", \"nonce_or_txid\": \"0xe06818b9da4feef5cd590bd68aa23f13e29ef49354ecdd1ae18b11074bf47478\", \"amount\": \"1000000000000000\", \"user_addr\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"to_addr\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"status\": \"finished\" }, { \"type\": \"eth_mint\", \"nonce_or_txid\": \"0x0002a128139692f866b6a1615ce2c40ad337796fc0ca6e51cc7eb6e30baab760\", \"amount\": \"1000000000000000\", \"user_addr\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"to_addr\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"status\": \"finished\" }], \"total\": 2 } } getWalletTransferList Get wallet transfer operation list during custodian member changing. Parameters (1) skip:(Number) the number of leading operations to be ignored\\ (2) count:(Number) the maximum number of operations to return Returns JSON object:\\ {\\ txs: (Array of JSON objects) transactions in requested range\\ [\\ For doing request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ need:(Number) total number of signatures needed,\\ signer:(array of string) list of members who have signed,\\ has_signed:(bool) whether current member has signed or not,\\ status:(string) \"doing\",\\ },\\ For finished request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ status:(string) \"finished\",\\ }...]\\ total: (Number) total number of transactions,\\ } Example $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getWalletTransferList\",\"params\":[0,100],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"txs\": [{ \"type\": \"ProfitTransfer\", \"nonce_or_txid\": \"3\", \"amount\": \"NaN\", \"user_addr\": \"2N9rEmrpFA1b7HKZiDghnNEmTy6MDrgV3aC\", \"to_addr\": \"2N7tUaxmwq9rwtXZUYymiYXnn9s7Vd2hMZp\", \"status\": \"finished\" }, { \"type\": \"HotTransfer\", \"nonce_or_txid\": \"ab68b057429271ac11a860002264c77e074d1125e3ee30d865e5276a488fad90\", \"amount\": \"60000\", \"user_addr\": \"2MsPJwNqdeUHvxM3munWBxtCE2WncF9PKbZ\", \"to_addr\": \"2N7UpxpCo6gEpPdjksZPPE9GjTq8JY1KQpz\", \"status\": \"finished\" }], \"total\": 2 } } getCustodianInfo Get information of custodian members. Parameters None. Returns JSON objects:\\ {\\ custodians:(Array of JSON objects):\\ [{\\ name:(string),\\ keys:(JSON object) keys of custodian member,\\ join_epoch:(Number) epoch the member joined the custodian,\\ sig_cnt:(string) times of multi-signature the member participated in,\\ }, ...],\\ op_cnt:(Number) total number of multi-signature operations,\\ } Example $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getCustodianInfo\",\"params\":[],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"custodians\": [{ \"name\": \"fafa\", \"keys\": { \"cfx_hot\": \"0x81f3521d71990945b99e1c592750d7157f2b544f\", \"cfx_cold\": \"0x81f3521d71990945b99e1c592750d7157f2b544f\", \"eth_hot\": \"0x6B6C3A1eC5C689C3dd158b1a6E8Bc722373a2BfA\", \"eth_cold\": \"0x6B6C3A1eC5C689C3dd158b1a6E8Bc722373a2BfA\", \"btc_hot\": \"021a72579a46e91c11cc01f8e072c4a4eedfc477bfc8f2925e02ec006420b4cfc8\", \"btc_cold\": \"039802c21509fdcec599680c04a7e93234a954997184aeccaf96006fe8c3c68b74\" }, \"join_epoch\": 1578246, \"sig_cnt\": 5 }, { \"name\": \"ppd\", \"keys\": { \"cfx_hot\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"cfx_cold\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"eth_hot\": \"0x578Dd2BFc41bb66e9f0ae0802C613996440C9597\", \"eth_cold\": \"0x578Dd2BFc41bb66e9f0ae0802C613996440C9597\", \"btc_hot\": \"02af37a0dbdb234f8f522b8980c9100b4a9cc989be54a09354a12f4122a7e2b87c\", \"btc_cold\": \"03919638867f7e32c58d902a7b95ccfe1bfd928fc44544e0414be99f6addcee790\" }, \"join_epoch\": 1578246, \"sig_cnt\": 5 }, { \"name\": \"autumn\", \"keys\": { \"cfx_hot\": \"0x2338f8646aeaa5a32d374fae49ee7aae6bca1efc\", \"cfx_cold\": \"0x2338f8646aeaa5a32d374fae49ee7aae6bca1efc\", \"eth_hot\": \"0xF0D8ABE44f98F198F1DB255A7833F27a28774D35\", \"eth_cold\": \"0xF0D8ABE44f98F198F1DB255A7833F27a28774D35\", \"btc_hot\": \"028ff2d81abce71ab8b910f4b604b976907f7310cf8970093f09bb7726f14d7534\", \"btc_cold\": \"028ff2d81abce71ab8b910f4b604b976907f7310cf8970093f09bb7726f14d7534\" }, \"join_epoch\": 1579865, \"sig_cnt\": 0 }], \"op_cnt\": 18 } } getBounds Get bounds of tokens. Parameters None. Returns JSON object Example $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getBounds\",\"params\":[],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.21.174:8001 { \"eth\": { \"lower_bound\": \"0\", \"upper_bound\": \"10000000000000000\" }, \"btc\": { \"lower_bound\": \"0\", \"upper_bound\": \"10000000000\" }, \"usdt\": { \"lower_bound\": \"0\", \"upper_bound\": \"10000000000000000\" } }","title":"JSON RPC"},{"location":"shuttleflow/json_rpc/#json-rpc-methods","text":"","title":"JSON-RPC Methods"},{"location":"shuttleflow/json_rpc/#gethotwalletbalance","text":"Get the hot wallet balance of specified token.","title":"getHotWalletBalance"},{"location":"shuttleflow/json_rpc/#parameters","text":"(1) token: (string)","title":"Parameters"},{"location":"shuttleflow/json_rpc/#returns","text":"String","title":"Returns"},{"location":"shuttleflow/json_rpc/#example","text":"$ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getHotWalletBalance\",\"params\":[\"btc\"],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": 0.00281705 }","title":"Example"},{"location":"shuttleflow/json_rpc/#getcoldwalletbalance","text":"Get the cold wallet balance of specified token.","title":"getColdWalletBalance"},{"location":"shuttleflow/json_rpc/#parameters_1","text":"(1) token: (string)","title":"Parameters"},{"location":"shuttleflow/json_rpc/#returns_1","text":"String","title":"Returns"},{"location":"shuttleflow/json_rpc/#example_1","text":"$ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getColdWalletBalance\",\"params\":[\"btc\"],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": 0 }","title":"Example"},{"location":"shuttleflow/json_rpc/#getprofitwalletbalance","text":"Get the profit wallet balance of specified token.","title":"getProfitWalletBalance"},{"location":"shuttleflow/json_rpc/#parameters_2","text":"(1) token: (string)","title":"Parameters"},{"location":"shuttleflow/json_rpc/#returns_2","text":"Number","title":"Returns"},{"location":"shuttleflow/json_rpc/#example_2","text":"$ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getProfitWalletBalance\",\"params\":[\"eth\"],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": \"0\" }","title":"Example"},{"location":"shuttleflow/json_rpc/#getwalletaddress","text":"Get the wallet address url for different token.","title":"getWalletAddress"},{"location":"shuttleflow/json_rpc/#parameters_3","text":"None.","title":"Parameters"},{"location":"shuttleflow/json_rpc/#returns_3","text":"JSON object:\\ {\\ token_name: (JSON object)\\ {\\ \"hot_wallet\": (String) url of wallet,\\ \"cold_wallet\": (String) url of wallet,\\ \"profit_wallet\": (String) url of wallet,\\ \"personal_wallet\": (String) url of wallet,\\ }\\ }","title":"Returns"},{"location":"shuttleflow/json_rpc/#example_3","text":"$ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getWalletAddress\",\"params\":[],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"btc\": { \"hot_wallet\": \"https://blockstream.info/testnet/address/2MsPJwNqdeUHvxM3munWBxtCE2WncF9PKbZ\", \"cold_wallet\": \"https://blockstream.info/testnet/address/2N5d2CVouyjaF8thM9anTTcJFyHvhF2AdRS\", \"profit_wallet\": \"https://blockstream.info/testnet/address/2N9rEmrpFA1b7HKZiDghnNEmTy6MDrgV3aC\", \"personal_wallet\": \"https://blockstream.info/testnet/address/mhMHPARYGwa4gki9bjtyZnSWAX7ApfjhuR\" }, \"eth\": { \"hot_wallet_address\": \"https://rinkeby.etherscan.io/address/0x81632943BA6395d5E998393343e2Bb47c9f8Aa18\", \"cold_wallet_address\": \"https://rinkeby.etherscan.io/address/0x81632943BA6395d5E998393343e2Bb47c9f8Aa18\", \"profit_wallet_address\": \"https://rinkeby.etherscan.io/address/0x81632943BA6395d5E998393343e2Bb47c9f8Aa18\", \"personal_address\": \"https://rinkeby.etherscan.io/address/0x6B6C3A1eC5C689C3dd158b1a6E8Bc722373a2BfA\" }, \"usdt\": { \"hot_wallet_address\": \"https://rinkeby.etherscan.io/token/0xd5185bF8E6F0706aBED0a4025bA4969197c8166B?a=0x81632943BA6395d5E998393343e2Bb47c9f8Aa18\", \"cold_wallet_address\": \"https://rinkeby.etherscan.io/token/0xd5185bF8E6F0706aBED0a4025bA4969197c8166B?a=0x81632943BA6395d5E998393343e2Bb47c9f8Aa18\", \"profit_wallet_address\": \"https://rinkeby.etherscan.io/token/0xd5185bF8E6F0706aBED0a4025bA4969197c8166B?a=0x81632943BA6395d5E998393343e2Bb47c9f8Aa18\", \"personal_address\": \"https://rinkeby.etherscan.io/token/0xd5185bF8E6F0706aBED0a4025bA4969197c8166B?a=0x6B6C3A1eC5C689C3dd158b1a6E8Bc722373a2BfA\" } } }","title":"Example"},{"location":"shuttleflow/json_rpc/#verifybalance","text":"verify the balance of a specified token.","title":"verifyBalance"},{"location":"shuttleflow/json_rpc/#parameters_4","text":"(1) token: (string)","title":"Parameters"},{"location":"shuttleflow/json_rpc/#returns_4","text":"JSON object:\\ {\\ hot: (string) hot wallet balance,\\ cold: (string) cold wallet balance,\\ total: (string) cToken total supply,\\ success: (bool) verification result,\\ }","title":"Returns"},{"location":"shuttleflow/json_rpc/#example_4","text":"$ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"verifyBalance\",\"params\":[\"btc\"],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"hot\": \"0\", \"cold\": \"0.0203324\", \"total\": \"0.005\", \"success\": false } }","title":"Example"},{"location":"shuttleflow/json_rpc/#getcoldtransferhashbtc","text":"Get the hash of bitcoin operation which need private key of cold wallet.","title":"getColdTransferHashBtc"},{"location":"shuttleflow/json_rpc/#parameters_5","text":"(1) type: (string), \"ColdToHot\"|\"ColdTransfer\"|\"ProfitTransfer\"|\"SplitProfit\",\\ (2) amount: (string | number), Optional (only \"ColdToHot\" | \"SplitProfit\")","title":"Parameters"},{"location":"shuttleflow/json_rpc/#returns_5","text":"JSON object:\\ {\\ digest:(array of array of string) hash of each utxos used to sign,\\ hash:(string) internal transaction hash, }","title":"Returns"},{"location":"shuttleflow/json_rpc/#example_5","text":"$ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getColdTransferHashBtc\",\"params\":[\"ColdToHot\",\"100000\"],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"hash\": \"c051866e922c9d0eee16b075791fc71076c55b0e7c7da2f03cebc41ff3f234e0#1\", \"digests\": [ [\"7d6b239bab77e06a7814e07653ce0b746b559a101f4958dccd5cab0e8801c00c\"] ] } } $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getColdTransferHashBtc\",\"params\":[\"SplitProfit\",\"100000\"],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"hash\": \"SplitProfit@2N9rEmrpFA1b7HKZiDghnNEmTy6MDrgV3aC@@0x186a0#1\", \"digests\": [ [\"298b25483820fddf35a3930422690f8a5053fb3ffa9ec660627a39ed78bec3d7\"] ] } }","title":"Example"},{"location":"shuttleflow/json_rpc/#getcoldtransferhasheth","text":"Get the hash of eth/erc20 token operation which need private key of cold wallet.","title":"getColdTransferHashEth"},{"location":"shuttleflow/json_rpc/#parameters_6","text":"(1) type: (string), \"ColdToHot\"|\"SplitProfit\",\\ (2) token: (string)\\ (3) amount: (string | number)","title":"Parameters"},{"location":"shuttleflow/json_rpc/#returns_6","text":"JSON object:\\ {\\ token:(string),\\ amount:(string),\\ nonce:(string), operation nonce, \\ hash:(string), internal transaction hash,\\ }","title":"Returns"},{"location":"shuttleflow/json_rpc/#example_6","text":"$ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getColdTransferHashEth\",\"params\":[\"ColdToHot\",\"eth\",\"100000\"],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"token\": \"eth\", \"amount\": \"0x186a0\", \"nonce\": \"0\", \"hash\": \"0xecf1cd87d27cbd0785da88625b7c414ed1954fd8abb3a427f295537152fdeed2\" } }","title":"Example"},{"location":"shuttleflow/json_rpc/#signcoldtransferbtc","text":"sign the bitcoin transfer cold wallet to another address request.","title":"signColdTransferBtc"},{"location":"shuttleflow/json_rpc/#parameters_7","text":"(1) type:(string) \"ColdToHot\"|\"ColdTransfer\"|\"ProfitTransfer\"|\"SplitProfit\",\\ (2) amount: (string | number), Optional (only \"ColdToHot\" | \"SplitProfit\"),\\ (3) hash:(string) internal transaction hash to sign\\ (4) signatures:(array of array of string) signature of each utxos used (5) signer:(string) signer's public key","title":"Parameters"},{"location":"shuttleflow/json_rpc/#returns_7","text":"\"sign successfully\" | Error Message (string)","title":"Returns"},{"location":"shuttleflow/json_rpc/#example_7","text":"$ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"signColdTransferBtc\",\"params\":[\"ColdToHot\",\"100000\",\"c051866e922c9d0eee16b075791fc71076c55b0e7c7da2f03cebc41ff3f234e0#1\",[[\"7d6b239bab77e06a7814e07653ce0b746b559a101f4958dccd5cab0e8801c00c\"]]],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": \"sign successfully\" } $ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"signColdTransferBtc\",\"params\":[\"SplitProfit\",\"100000\",\"SplitProfit@2N9rEmrpFA1b7HKZiDghnNEmTy6MDrgV3aC@@0x186a0#1\",[[\"304402202c645b25cc329d2b8adb82c7ee0aca60e28e132bc8ac500efd18aa5229b9531b02201a4972bda60aeaddd489d0774d3b2648a3384c2767dbb6ee1a395941e241909301\"]]],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": \"sign successfully\" }","title":"Example"},{"location":"shuttleflow/json_rpc/#signcoldtransfereth","text":"sign the ethereum or erc20 token transfer cold wallet to another address request.","title":"signColdTransferEth"},{"location":"shuttleflow/json_rpc/#parameters_8","text":"(1) type: (string), \"ColdToHot\"|\"SplitProfit\",\\ (2) token:(string) token name or erc20 or eth,\\ (3) amount:(string),\\ (4) nonce:(string), operation nonce,\\ (5) hash:(string), internal transaction hash,\\ (6) signature:(string), signature of hash (7) signer:(string), signer's public key","title":"Parameters"},{"location":"shuttleflow/json_rpc/#returns_8","text":"\"sign successfully\" | Error Message (string)","title":"Returns"},{"location":"shuttleflow/json_rpc/#example_8","text":"$ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"signColdTransferEth\",\"params\":[\"ColdToHot\",\"eth\",\"100000\",\"0\",\"0xecf1cd87d27cbd0785da88625b7c414ed1954fd8abb3a427f295537152fdeed2\",\"0x6df962201a0372d415d79ef6b8cfde457ea2f6a352651f0b189c6d114615a4cb6a9c298fe36b9954bc55a6e42295a8c6720a0aec0d4d85b0c82db1d6e10d1c741b\"],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": \"sign successfully\" }","title":"Example"},{"location":"shuttleflow/json_rpc/#getmemberchangeinfo","text":"Get last member change information.","title":"getMemberChangeInfo"},{"location":"shuttleflow/json_rpc/#parameters_9","text":"None.","title":"Parameters"},{"location":"shuttleflow/json_rpc/#returns_9","text":"JSON object:\\ {\\ info:(JSON object) Member change detail:\\ {\\ epoch:(Number),\\ changes:(array of JSON object) [{,\\ member:(string),\\ operation:(string) \"add\" | \"remove\",\\ }...]\\ }\\ address_change:(JSON object) bitcoin address change detail:\\ {\\ last_hot_address:(string),\\ last_cold_address:(string),\\ last_profit_address:(string),\\ hot_address:(string),\\ cold_address:(string),\\ profit_address:(string),\\ }\\ }","title":"Returns"},{"location":"shuttleflow/json_rpc/#example_9","text":"$ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getMemberChangeInfo\",\"params\":[],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"info\": { \"epoch\": 200924, \"changes\": [{ \"member\": \"0x81f3521d71990945B99e1C592750D7157F2b544f\", \"operation\": \"remove\" }, { \"member\": \"0x65CF2b2c91e6eff901F10ab7363ae58cf1bfCCc5\", \"operation\": \"remove\" }, { \"member\": \"0x81f3521d71990945b99e1c592750d7157f2b544f\", \"operation\": \"add\" }, { \"member\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"operation\": \"add\" }, { \"member\": \"0x2338f8646aeaa5a32d374fae49ee7aae6bca1efc\", \"operation\": \"add\" }] }, \"address_change\": { \"last_hot_address\": \"2MsPJwNqdeUHvxM3munWBxtCE2WncF9PKbZ\", \"last_cold_address\": \"2N5d2CVouyjaF8thM9anTTcJFyHvhF2AdRS\", \"last_profit_address\": \"2N9rEmrpFA1b7HKZiDghnNEmTy6MDrgV3aC\", \"cold_address\": \"2MyP3jysyz1GTeD6VHPZ6Wqs5SkNc2VkNBb\", \"profit_address\": \"2N7tUaxmwq9rwtXZUYymiYXnn9s7Vd2hMZp\", \"hot_address\": \"2N7UpxpCo6gEpPdjksZPPE9GjTq8JY1KQpz\" } } }","title":"Example"},{"location":"shuttleflow/json_rpc/#gethotcoldwallettransferlist","text":"Get wallet transfer operations list between hot and cold wallet.","title":"getHotColdWalletTransferList"},{"location":"shuttleflow/json_rpc/#parameters_10","text":"(1) skip:(Number) the number of leading operations to be ignored\\ (2) count:(Number) the maximum number of operations to return","title":"Parameters"},{"location":"shuttleflow/json_rpc/#returns_10","text":"","title":"Returns"},{"location":"shuttleflow/json_rpc/#example_10","text":"JSON object:\\ {\\ txs: (Array of JSON objects) transactions in requested range\\ [\\ For doing request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ need:(Number) total number of signatures needed,\\ signer:(array of string) list of members who have signed,\\ has_signed:(bool) whether current member has signed or not,\\ status:(string) \"doing\",\\ },\\ For finished request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ status:(string) \"finished\",\\ }...]\\ total: (Number) total number of transactions,\\ }","title":"Example"},{"location":"shuttleflow/json_rpc/#example_11","text":"$ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getHotColdWalletTransferList\",\"params\":[0,100],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"txs\": [{ \"type\": \"eth_ColdToHot\", \"nonce_or_txid\": \"0\", \"amount\": \"100000\", \"user_addr\": \"\", \"addr\": \"\", \"signer\": [\"0x6B6C3A1eC5C689C3dd158b1a6E8Bc722373a2BfA\"], \"has_signed\": true, \"need\": 2, \"status\": \"doing\" }, { \"type\": \"eth_HotToCold\", \"nonce_or_txid\": \"0\", \"user_addr\": \"\", \"addr\": \"\", \"status\": \"finished\" }], \"total\": 2 } }","title":"Example"},{"location":"shuttleflow/json_rpc/#getprofitsplitlist","text":"Get profit split operations list.","title":"getProfitSplitList"},{"location":"shuttleflow/json_rpc/#parameters_11","text":"(1) skip:(Number) the number of leading operations to be ignored\\ (2) count:(Number) the maximum number of operations to return","title":"Parameters"},{"location":"shuttleflow/json_rpc/#returns_11","text":"JSON object:\\ {\\ txs: (Array of JSON objects) transactions in requested range\\ [\\ For doing request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ need:(Number) total number of signatures needed,\\ signer:(array of string) list of members who have signed,\\ has_signed:(bool) whether current member has signed or not,\\ status:(string) \"doing\",\\ },\\ For finished request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ status:(string) \"finished\",\\ }...]\\ total: (Number) total number of transactions,\\ }","title":"Returns"},{"location":"shuttleflow/json_rpc/#example_12","text":"$ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getProfitSplitList\",\"params\":[0,100],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"txs\": [{ \"type\": \"eth_SplitProfit\", \"nonce_or_txid\": \"1\", \"amount\": \"100\", \"user_addr\": \"\", \"addr\": \"\", \"status\": \"finished\" }], \"total\": 1 } }","title":"Example"},{"location":"shuttleflow/json_rpc/#getuseroperationlist","text":"Get user mint/burn operations list.","title":"getUserOperationList"},{"location":"shuttleflow/json_rpc/#parameters_12","text":"(1) skip:(Number) the number of leading operations to be ignored\\ (2) count:(Number) the maximum number of operations to return","title":"Parameters"},{"location":"shuttleflow/json_rpc/#returns_12","text":"JSON object:\\ {\\ txs: (Array of JSON objects) transactions in requested range\\ [\\ For doing request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ need:(Number) total number of signatures needed,\\ signer:(array of string) list of members who have signed,\\ has_signed:(bool) whether current member has signed or not,\\ status:(string) \"doing\",\\ },\\ For finished request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ status:(string) \"finished\",\\ }...]\\ total: (Number) total number of transactions,\\ }","title":"Returns"},{"location":"shuttleflow/json_rpc/#example_13","text":"$ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getUserOperationList\",\"params\":[0,100],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"txs\": [{ \"type\": \"eth_mint\", \"nonce_or_txid\": \"0x0002a128139692f866b6a1615ce2c40ad337796fc0ca6e51cc7eb6e30baab760\", \"amount\": \"1000000000000000\", \"user_addr\": \"0x65CF2b2c91e6eff901F10ab7363ae58cf1bfCCc5\", \"to_addr\": \"0x65CF2b2c91e6eff901F10ab7363ae58cf1bfCCc5\", \"signer\": [\"fafa\"], \"has_signed\": true, \"need\": 2, \"status\": \"doing\" }, { \"type\": \"btc_mint\", \"nonce_or_txid\": \"ab68b057429271ac11a860002264c77e074d1125e3ee30d865e5276a488fad90\", \"amount\": \"100000\", \"user_addr\": \"0x81f3521d71990945b99e1c592750d7157f2b544f\", \"to_addr\": \"0x81f3521d71990945b99e1c592750d7157f2b544f\", \"status\": \"finished\" }, { \"type\": \"eth_mint\", \"nonce_or_txid\": \"0xe06818b9da4feef5cd590bd68aa23f13e29ef49354ecdd1ae18b11074bf47478\", \"amount\": \"1000000000000000\", \"user_addr\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"to_addr\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"status\": \"finished\" }, { \"type\": \"cUSDT_mint\", \"nonce_or_txid\": \"0xf1685c53cf641b330d580e9a38f783d1ad875250ffae49d182d7189c9de7907e\", \"amount\": \"100000\", \"user_addr\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"to_addr\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"status\": \"finished\" }, { \"type\": \"withdraw\", \"nonce_or_txid\": \"af6e2107fe26a54f84f234941db111afea9de9c9d1caa4d18778fcf22fe12247\", \"amount\": \"100000\", \"user_addr\": \"\", \"to_addr\": \"\", \"status\": \"finished\" }], \"total\": 5 } }","title":"Example"},{"location":"shuttleflow/json_rpc/#getspecificuseroperationlist","text":"Get user mint/burn operations list of specific user.","title":"getSpecificUserOperationList"},{"location":"shuttleflow/json_rpc/#parameters_13","text":"(1) data:(JSON Object) the query detail\\ (2) skip:(Number) the number of leading operations to be ignored\\ (3) count:(Number) the maximum number of operations to return","title":"Parameters"},{"location":"shuttleflow/json_rpc/#returns_13","text":"JSON object:\\ {\\ txs: (Array of JSON objects) transactions in requested range\\ [\\ For doing request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ need:(Number) total number of signatures needed,\\ signer:(array of string) list of members who have signed,\\ has_signed:(bool) whether current member has signed or not,\\ status:(string) \"doing\",\\ },\\ For finished request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ status:(string) \"finished\",\\ }...]\\ total: (Number) total number of transactions,\\ }","title":"Returns"},{"location":"shuttleflow/json_rpc/#example_14","text":"$ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getSpecificUserOperationList\",\"params\":[{\"address\":\"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\",\"status\":[\"doing\",\"finished\"],\"types\":[\"eth_mint\",\"erc20_mint\"]},0,100],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"txs\": [{ \"type\": \"eth_mint\", \"nonce_or_txid\": \"0xe06818b9da4feef5cd590bd68aa23f13e29ef49354ecdd1ae18b11074bf47478\", \"amount\": \"1000000000000000\", \"user_addr\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"to_addr\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"status\": \"finished\" }, { \"type\": \"eth_mint\", \"nonce_or_txid\": \"0x0002a128139692f866b6a1615ce2c40ad337796fc0ca6e51cc7eb6e30baab760\", \"amount\": \"1000000000000000\", \"user_addr\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"to_addr\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"status\": \"finished\" }], \"total\": 2 } }","title":"Example"},{"location":"shuttleflow/json_rpc/#getwallettransferlist","text":"Get wallet transfer operation list during custodian member changing.","title":"getWalletTransferList"},{"location":"shuttleflow/json_rpc/#parameters_14","text":"(1) skip:(Number) the number of leading operations to be ignored\\ (2) count:(Number) the maximum number of operations to return","title":"Parameters"},{"location":"shuttleflow/json_rpc/#returns_14","text":"JSON object:\\ {\\ txs: (Array of JSON objects) transactions in requested range\\ [\\ For doing request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ need:(Number) total number of signatures needed,\\ signer:(array of string) list of members who have signed,\\ has_signed:(bool) whether current member has signed or not,\\ status:(string) \"doing\",\\ },\\ For finished request:\\ {\\ type:(string),\\ nonce_or_txid:(string),\\ amount:(string),\\ user_addr:(string) user address,\\ to_addr:(string) money to address,\\ status:(string) \"finished\",\\ }...]\\ total: (Number) total number of transactions,\\ }","title":"Returns"},{"location":"shuttleflow/json_rpc/#example_15","text":"$ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getWalletTransferList\",\"params\":[0,100],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"txs\": [{ \"type\": \"ProfitTransfer\", \"nonce_or_txid\": \"3\", \"amount\": \"NaN\", \"user_addr\": \"2N9rEmrpFA1b7HKZiDghnNEmTy6MDrgV3aC\", \"to_addr\": \"2N7tUaxmwq9rwtXZUYymiYXnn9s7Vd2hMZp\", \"status\": \"finished\" }, { \"type\": \"HotTransfer\", \"nonce_or_txid\": \"ab68b057429271ac11a860002264c77e074d1125e3ee30d865e5276a488fad90\", \"amount\": \"60000\", \"user_addr\": \"2MsPJwNqdeUHvxM3munWBxtCE2WncF9PKbZ\", \"to_addr\": \"2N7UpxpCo6gEpPdjksZPPE9GjTq8JY1KQpz\", \"status\": \"finished\" }], \"total\": 2 } }","title":"Example"},{"location":"shuttleflow/json_rpc/#getcustodianinfo","text":"Get information of custodian members.","title":"getCustodianInfo"},{"location":"shuttleflow/json_rpc/#parameters_15","text":"None.","title":"Parameters"},{"location":"shuttleflow/json_rpc/#returns_15","text":"JSON objects:\\ {\\ custodians:(Array of JSON objects):\\ [{\\ name:(string),\\ keys:(JSON object) keys of custodian member,\\ join_epoch:(Number) epoch the member joined the custodian,\\ sig_cnt:(string) times of multi-signature the member participated in,\\ }, ...],\\ op_cnt:(Number) total number of multi-signature operations,\\ }","title":"Returns"},{"location":"shuttleflow/json_rpc/#example_16","text":"$ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getCustodianInfo\",\"params\":[],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.20.168:8001 { \"jsonrpc\": \"2.0\", \"id\": 1, \"result\": { \"custodians\": [{ \"name\": \"fafa\", \"keys\": { \"cfx_hot\": \"0x81f3521d71990945b99e1c592750d7157f2b544f\", \"cfx_cold\": \"0x81f3521d71990945b99e1c592750d7157f2b544f\", \"eth_hot\": \"0x6B6C3A1eC5C689C3dd158b1a6E8Bc722373a2BfA\", \"eth_cold\": \"0x6B6C3A1eC5C689C3dd158b1a6E8Bc722373a2BfA\", \"btc_hot\": \"021a72579a46e91c11cc01f8e072c4a4eedfc477bfc8f2925e02ec006420b4cfc8\", \"btc_cold\": \"039802c21509fdcec599680c04a7e93234a954997184aeccaf96006fe8c3c68b74\" }, \"join_epoch\": 1578246, \"sig_cnt\": 5 }, { \"name\": \"ppd\", \"keys\": { \"cfx_hot\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"cfx_cold\": \"0x65cf2b2c91e6eff901f10ab7363ae58cf1bfccc5\", \"eth_hot\": \"0x578Dd2BFc41bb66e9f0ae0802C613996440C9597\", \"eth_cold\": \"0x578Dd2BFc41bb66e9f0ae0802C613996440C9597\", \"btc_hot\": \"02af37a0dbdb234f8f522b8980c9100b4a9cc989be54a09354a12f4122a7e2b87c\", \"btc_cold\": \"03919638867f7e32c58d902a7b95ccfe1bfd928fc44544e0414be99f6addcee790\" }, \"join_epoch\": 1578246, \"sig_cnt\": 5 }, { \"name\": \"autumn\", \"keys\": { \"cfx_hot\": \"0x2338f8646aeaa5a32d374fae49ee7aae6bca1efc\", \"cfx_cold\": \"0x2338f8646aeaa5a32d374fae49ee7aae6bca1efc\", \"eth_hot\": \"0xF0D8ABE44f98F198F1DB255A7833F27a28774D35\", \"eth_cold\": \"0xF0D8ABE44f98F198F1DB255A7833F27a28774D35\", \"btc_hot\": \"028ff2d81abce71ab8b910f4b604b976907f7310cf8970093f09bb7726f14d7534\", \"btc_cold\": \"028ff2d81abce71ab8b910f4b604b976907f7310cf8970093f09bb7726f14d7534\" }, \"join_epoch\": 1579865, \"sig_cnt\": 0 }], \"op_cnt\": 18 } }","title":"Example"},{"location":"shuttleflow/json_rpc/#getbounds","text":"Get bounds of tokens.","title":"getBounds"},{"location":"shuttleflow/json_rpc/#parameters_16","text":"None.","title":"Parameters"},{"location":"shuttleflow/json_rpc/#returns_16","text":"JSON object","title":"Returns"},{"location":"shuttleflow/json_rpc/#example_17","text":"$ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getBounds\",\"params\":[],\"id\":1}' -H \"Content-Type: application/json\" http://52.141.21.174:8001 { \"eth\": { \"lower_bound\": \"0\", \"upper_bound\": \"10000000000000000\" }, \"btc\": { \"lower_bound\": \"0\", \"upper_bound\": \"10000000000\" }, \"usdt\": { \"lower_bound\": \"0\", \"upper_bound\": \"10000000000000000\" } }","title":"Example"},{"location":"shuttleflow/sdk/","text":"Conflux Shuttleflow SDK https://www.npmjs.com/package/conflux-crosschain Functions // get ethereum receive wallet address (used for both eth & usdt) of user. // when user send money to receive wallet, custodian will directly deposit the // money to specified defi. // user_address: conflux address of user // defi: the address of defi user want deposit to, see getDefiList below // node_url: url of running crosschain custodian node async function getUserReceiveWalletEth(user_address, defi, node_url); // get bitcoin receive wallet address (used for both eth & usdt) of user. // when user send money to receive wallet, custodian will directly deposit the // money to specified defi. // user_address: conflux address of user // defi: the address of defi user want deposit to, see getDefiList below // node_url: url of running crosschain custodian node async function getUserReceiveWalletBtc(user_address, defi, node_url); // get user mint/burn operation list. // data: JSON object // { // address: (String) user conflux address, // type: 'mint' or 'burn' // defi: defi address // token: btc/eth/erc20 token address // status: (array of String) subset of {\"doing\", \"finished\"}, // } // skip: the number of leading results to be ignored // cnt: the maximum number of results to return (maximum 100) // node_url: url of running crosschain custodian node async function getUserOperationList(data, skip, cnt, node_url); // get supported token list. // return value: array of object: { reference: string ('btc'/'eth'/ erc20 token address), burn_fee: string (withdraw fee), mint_fee: string (mint fee), wallet_fee: string (receive wallet deployment fee), minimal_mint_value: string, symbol: string (cToken name), decimals: number (token decimals, e.g. btc is 8, eth is 18, usdt is 6), sponsor_value: string (amount of cETH sponsored), is_admin: bool (is admin token or not), ctoken: string (cToken conflux address) } async function getTokenList(node_url); // get supported defi list. // return value: array of object: { defi_name: string (defi name), defi_addr: string (defi conflux address) } async function getDefiList(node_url); // get burn fee of specific token. In 18 decimals. // token: 'eth' / 'btc' / erc20 address // return value: string, burn fee of corresponding erc777 token { burn_fee: string, mint_fee: string, wallet_fee: string, } async function getTokenBurnFee(token, node_url); Const parameters for test crosschain.test_conf = { usdt_addr: // usdt address on rinkeby testnet, node_url: // custodian node url, }; Examples Import crosschain module. const crosschain = require('crosschain'); const test_conf = crosschain.test_conf; get receive wallet address of a user: let receive_wallet = crosschain.getUserReceiveWalletEth( '0x6B6C3A1eC5C689C3dd158b1a6E8Bc722373a2BfA', '0x0000000000000000000000000000000000000000', test_conf.node_url ); 0xcc3b0e18c91fc1cd665dc9ec4d4f733971e8f556 // send eth to receive_wallet, custodian will mint cETH for users and then transfer them to CRC-L. // user's cETH will be locked in the address of CRC-L of cETH. get user operation list: crosschain.getUserOperationList({ address: '0x1f04dcc0432b2df7ce604f0ad4736cadf5ed04ea',// for example type: 'mint', token: 'eth', defi: '0x0000000000000000000000000000000000000000', status: ['finished', 'doing'], }, 0, 100, test_conf.node_url).then(console.log); { txs: [ { token: 'eth', type: 'cETH_mint', nonce_or_txid: '0x19d57ec6f769dd42e75d339ada0a2c6ce94ecb6a0eea99447ba05898cdc4a421', amount: '495000000000000000', user_addr: '0x1f04dcc0432b2df7ce604f0ad4736cadf5ed04ea', defi: '0x0000000000000000000000000000000000000000', to_addr: '0x1f04dcc0432b2df7ce604f0ad4736cadf5ed04ea', status: 'finished', settled_tx: '0x6fca35357dcb1f8f0a4bfab4bf09a4386568742dab1b312da3beb8863171dafe' }, { token: 'eth', type: 'cETH_mint', nonce_or_txid: '0x8f5ff6efaafe224223e87e1291b9684bc07f09293793a903b0ec94ff8f623fde', amount: '505000000000000000', user_addr: '0x1f04dcc0432b2df7ce604f0ad4736cadf5ed04ea', defi: '0x0000000000000000000000000000000000000000', to_addr: '0x1f04dcc0432b2df7ce604f0ad4736cadf5ed04ea', status: 'finished', settled_tx: '0x29fe0c47e79934b16ba71d40e3c9c124c4ae7ee03e61336568fd3b9870313872' } ], total: 2 } get mintable status: crosschain.isMintable(test_conf.node_url).then(console.log); true get defi list: crosschain.getDefiList(test_conf.node_url).then(console.log); [ { defi_name: 'Conflux Token', defi_addr: '0x0000000000000000000000000000000000000000' }, { defi_name: 'Conflux DEX', defi_addr: '0x8595b7822db70040b6bb30e87bd26eeb66576b37' } ] get token list: crosschain.getTokenList(test_conf.node_url).then(console.log); [ { reference: 'eth', burn_fee: '5000000000000000', mint_fee: '5000000000000000', wallet_fee: '5000000000000000', minimal_mint_value: '10000000000000000', symbol: 'cETH', decimals: 18, sponsor_value: '5000000000000000000', is_admin: true, ctoken: '0x83dfad4705a2bcf8b961bf0fdeac2f22738dc74f' }, { reference: 'btc', minimal_mint_value: '100000', symbol: 'cBTC', decimals: 8, sponsor_value: '0', ctoken: '0x8a957d0e7b9b607ef71f4505c3f4bc73b65130d5' }, { reference: '0x54cc2fbf8733c27984503025d5d2537b29af8054', burn_fee: '1000000', mint_fee: '1000000', wallet_fee: '1000000', minimal_mint_value: '1000000', symbol: 'cUSDT', decimals: 6, sponsor_value: '10000000000000000000', is_admin: true, ctoken: '0x8ea4eefd4fcdb6ad659584166f4c8f083133002d' }, { reference: '0x6b175474e89094c44da98b954eedeac495271d0f', burn_fee: '1000000000000000000', mint_fee: '1000000000000000000', wallet_fee: '1000000000000000000', minimal_mint_value: '1000000000000000000', symbol: 'cDAI', decimals: 18, sponsor_value: '1000000000000000000', is_admin: true, ctoken: '0x8008e2134e001a946fe52e011aef0d01ba834762' }, { reference: '0xc00e94cb662c3520282e6f5717214004a7f26888', burn_fee: '5000000000000000', mint_fee: '5000000000000000', wallet_fee: '5000000000000000', minimal_mint_value: '5000000000000000', symbol: 'cCOMP', decimals: 18, sponsor_value: '1000000000000000000', is_admin: false, ctoken: '0x80f14a1b69dae80bcbc4bdd2dd381418a92e1e8b' }, { reference: '0x431ad2ff6a9c365805ebad47ee021148d6f7dbe0', burn_fee: '3000000000000000000', mint_fee: '3000000000000000000', wallet_fee: '3000000000000000000', minimal_mint_value: '3000000000000000000', symbol: 'cDF', decimals: 18, sponsor_value: '1000000000000000000', is_admin: false, ctoken: '0x8c046fbcd70a23e0c34f8dfecda0c582a4fe72b5' }, { reference: '0xdd974d5c2e2928dea5f71b9825b8b646686bd200', burn_fee: '1000000000000000000', mint_fee: '1000000000000000000', wallet_fee: '1000000000000000000', minimal_mint_value: '1000000000000000000', symbol: 'cKNC', decimals: 18, sponsor_value: '1000000000000000000', is_admin: false, ctoken: '0x8f1624956129064805bb8b239d185f12b5d8aacc' } ]","title":"Conflux Crosschain SDK"},{"location":"shuttleflow/sdk/#conflux-shuttleflow-sdk","text":"https://www.npmjs.com/package/conflux-crosschain","title":"Conflux Shuttleflow SDK"},{"location":"shuttleflow/sdk/#functions","text":"// get ethereum receive wallet address (used for both eth & usdt) of user. // when user send money to receive wallet, custodian will directly deposit the // money to specified defi. // user_address: conflux address of user // defi: the address of defi user want deposit to, see getDefiList below // node_url: url of running crosschain custodian node async function getUserReceiveWalletEth(user_address, defi, node_url); // get bitcoin receive wallet address (used for both eth & usdt) of user. // when user send money to receive wallet, custodian will directly deposit the // money to specified defi. // user_address: conflux address of user // defi: the address of defi user want deposit to, see getDefiList below // node_url: url of running crosschain custodian node async function getUserReceiveWalletBtc(user_address, defi, node_url); // get user mint/burn operation list. // data: JSON object // { // address: (String) user conflux address, // type: 'mint' or 'burn' // defi: defi address // token: btc/eth/erc20 token address // status: (array of String) subset of {\"doing\", \"finished\"}, // } // skip: the number of leading results to be ignored // cnt: the maximum number of results to return (maximum 100) // node_url: url of running crosschain custodian node async function getUserOperationList(data, skip, cnt, node_url); // get supported token list. // return value: array of object: { reference: string ('btc'/'eth'/ erc20 token address), burn_fee: string (withdraw fee), mint_fee: string (mint fee), wallet_fee: string (receive wallet deployment fee), minimal_mint_value: string, symbol: string (cToken name), decimals: number (token decimals, e.g. btc is 8, eth is 18, usdt is 6), sponsor_value: string (amount of cETH sponsored), is_admin: bool (is admin token or not), ctoken: string (cToken conflux address) } async function getTokenList(node_url); // get supported defi list. // return value: array of object: { defi_name: string (defi name), defi_addr: string (defi conflux address) } async function getDefiList(node_url); // get burn fee of specific token. In 18 decimals. // token: 'eth' / 'btc' / erc20 address // return value: string, burn fee of corresponding erc777 token { burn_fee: string, mint_fee: string, wallet_fee: string, } async function getTokenBurnFee(token, node_url);","title":"Functions"},{"location":"shuttleflow/sdk/#const-parameters-for-test","text":"crosschain.test_conf = { usdt_addr: // usdt address on rinkeby testnet, node_url: // custodian node url, };","title":"Const parameters for test"},{"location":"shuttleflow/sdk/#examples","text":"Import crosschain module. const crosschain = require('crosschain'); const test_conf = crosschain.test_conf; get receive wallet address of a user: let receive_wallet = crosschain.getUserReceiveWalletEth( '0x6B6C3A1eC5C689C3dd158b1a6E8Bc722373a2BfA', '0x0000000000000000000000000000000000000000', test_conf.node_url ); 0xcc3b0e18c91fc1cd665dc9ec4d4f733971e8f556 // send eth to receive_wallet, custodian will mint cETH for users and then transfer them to CRC-L. // user's cETH will be locked in the address of CRC-L of cETH. get user operation list: crosschain.getUserOperationList({ address: '0x1f04dcc0432b2df7ce604f0ad4736cadf5ed04ea',// for example type: 'mint', token: 'eth', defi: '0x0000000000000000000000000000000000000000', status: ['finished', 'doing'], }, 0, 100, test_conf.node_url).then(console.log); { txs: [ { token: 'eth', type: 'cETH_mint', nonce_or_txid: '0x19d57ec6f769dd42e75d339ada0a2c6ce94ecb6a0eea99447ba05898cdc4a421', amount: '495000000000000000', user_addr: '0x1f04dcc0432b2df7ce604f0ad4736cadf5ed04ea', defi: '0x0000000000000000000000000000000000000000', to_addr: '0x1f04dcc0432b2df7ce604f0ad4736cadf5ed04ea', status: 'finished', settled_tx: '0x6fca35357dcb1f8f0a4bfab4bf09a4386568742dab1b312da3beb8863171dafe' }, { token: 'eth', type: 'cETH_mint', nonce_or_txid: '0x8f5ff6efaafe224223e87e1291b9684bc07f09293793a903b0ec94ff8f623fde', amount: '505000000000000000', user_addr: '0x1f04dcc0432b2df7ce604f0ad4736cadf5ed04ea', defi: '0x0000000000000000000000000000000000000000', to_addr: '0x1f04dcc0432b2df7ce604f0ad4736cadf5ed04ea', status: 'finished', settled_tx: '0x29fe0c47e79934b16ba71d40e3c9c124c4ae7ee03e61336568fd3b9870313872' } ], total: 2 } get mintable status: crosschain.isMintable(test_conf.node_url).then(console.log); true get defi list: crosschain.getDefiList(test_conf.node_url).then(console.log); [ { defi_name: 'Conflux Token', defi_addr: '0x0000000000000000000000000000000000000000' }, { defi_name: 'Conflux DEX', defi_addr: '0x8595b7822db70040b6bb30e87bd26eeb66576b37' } ] get token list: crosschain.getTokenList(test_conf.node_url).then(console.log); [ { reference: 'eth', burn_fee: '5000000000000000', mint_fee: '5000000000000000', wallet_fee: '5000000000000000', minimal_mint_value: '10000000000000000', symbol: 'cETH', decimals: 18, sponsor_value: '5000000000000000000', is_admin: true, ctoken: '0x83dfad4705a2bcf8b961bf0fdeac2f22738dc74f' }, { reference: 'btc', minimal_mint_value: '100000', symbol: 'cBTC', decimals: 8, sponsor_value: '0', ctoken: '0x8a957d0e7b9b607ef71f4505c3f4bc73b65130d5' }, { reference: '0x54cc2fbf8733c27984503025d5d2537b29af8054', burn_fee: '1000000', mint_fee: '1000000', wallet_fee: '1000000', minimal_mint_value: '1000000', symbol: 'cUSDT', decimals: 6, sponsor_value: '10000000000000000000', is_admin: true, ctoken: '0x8ea4eefd4fcdb6ad659584166f4c8f083133002d' }, { reference: '0x6b175474e89094c44da98b954eedeac495271d0f', burn_fee: '1000000000000000000', mint_fee: '1000000000000000000', wallet_fee: '1000000000000000000', minimal_mint_value: '1000000000000000000', symbol: 'cDAI', decimals: 18, sponsor_value: '1000000000000000000', is_admin: true, ctoken: '0x8008e2134e001a946fe52e011aef0d01ba834762' }, { reference: '0xc00e94cb662c3520282e6f5717214004a7f26888', burn_fee: '5000000000000000', mint_fee: '5000000000000000', wallet_fee: '5000000000000000', minimal_mint_value: '5000000000000000', symbol: 'cCOMP', decimals: 18, sponsor_value: '1000000000000000000', is_admin: false, ctoken: '0x80f14a1b69dae80bcbc4bdd2dd381418a92e1e8b' }, { reference: '0x431ad2ff6a9c365805ebad47ee021148d6f7dbe0', burn_fee: '3000000000000000000', mint_fee: '3000000000000000000', wallet_fee: '3000000000000000000', minimal_mint_value: '3000000000000000000', symbol: 'cDF', decimals: 18, sponsor_value: '1000000000000000000', is_admin: false, ctoken: '0x8c046fbcd70a23e0c34f8dfecda0c582a4fe72b5' }, { reference: '0xdd974d5c2e2928dea5f71b9825b8b646686bd200', burn_fee: '1000000000000000000', mint_fee: '1000000000000000000', wallet_fee: '1000000000000000000', minimal_mint_value: '1000000000000000000', symbol: 'cKNC', decimals: 18, sponsor_value: '1000000000000000000', is_admin: false, ctoken: '0x8f1624956129064805bb8b239d185f12b5d8aacc' } ]","title":"Examples"},{"location":"shuttleflow/smart_contract/","text":"The Shuttleflow Smart Contracts Design and Implementation Design Goals The Shuttleflow smart contracts have following design goals: Support atomic mapping between Conflux cToken and cross chain assets including BTC, ETH and ERC20 tokens. Maintain the membership and authority of custodian alliance. Pausable and upgradable, data migration. The code of smart contract will open source in future. Components (on Conflux) CustodianCore : crosschain goverance contract TokenSponsor : token sponsor contract TokenBase : cToken contract Components (on Ethereum) EthFactory : crosschain goverance contract on ethereum DefiRelayer : the defi relayer contract for defi on ethereum who want to receive assets migrated from conflux chain.","title":"The Shuttleflow Smart Contracts Design and Implementation"},{"location":"shuttleflow/smart_contract/#the-shuttleflow-smart-contracts-design-and-implementation","text":"","title":"The Shuttleflow Smart Contracts Design and Implementation"},{"location":"shuttleflow/smart_contract/#design-goals","text":"The Shuttleflow smart contracts have following design goals: Support atomic mapping between Conflux cToken and cross chain assets including BTC, ETH and ERC20 tokens. Maintain the membership and authority of custodian alliance. Pausable and upgradable, data migration. The code of smart contract will open source in future.","title":"Design Goals"},{"location":"shuttleflow/smart_contract/#components-on-conflux","text":"CustodianCore : crosschain goverance contract TokenSponsor : token sponsor contract TokenBase : cToken contract","title":"Components (on Conflux)"},{"location":"shuttleflow/smart_contract/#components-on-ethereum","text":"EthFactory : crosschain goverance contract on ethereum DefiRelayer : the defi relayer contract for defi on ethereum who want to receive assets migrated from conflux chain.","title":"Components (on Ethereum)"},{"location":"shuttleflow/token_base/","text":"TokenBase TokenBase is the cross chain token contract (cToken). It follows ERC777 standard except burn function. Owership and autorities: * Owner of cToken is initially who deployed it (Conflux admin), then its owner will transfer the ownership to CustodianCore contract. Only owner of the contract is able to mint cToken. * Only pausers are able to pause/unpause the cToken contract. Initially, the pauser of cToken is Conflux admin, the pauser can add other pausers. Core Functions: TokenBase implements the functions of ERC777 standard, with a different mint and burn function: function mint( address account, // user conflux address uint256 amount, // user mint amount address fee_address, // sponsor of the token uint256 fee, // mint fee, or mint fee + receive wallet fee address defi, // conflux defi string memory tx_id // cross chain transaction hash ) public; Owner authority required. Mint tokens for user and mint tokens for token sponsor as fee. function burn( address user_addr, // user conflux address uint256 amount, // burn amount uint256 expected_fee, // expected burn fee, in 18 decimals string memory addr, // external chain receive address address defi_relayer // external chain defi relayer address ) public; Burn cToken from sender's address. user_addr is used to logging, in case Conflux Defi burn cToken for normal user. amount should be larger than burn_fee and minimal_burn_value in CustodianCore contract(Note here the decimals of amount is 18 and decimals of burn_fee and minimal_burn_value in CustoidanCore contract is reference token's decimal, the smart contract will do the decimal conversion for comparison). Besides, if the fee is higher than expected_fee , the burn transaction will revert. addr is a ethereum or bitcoin address, which the reference token will be sent to. If it is a burnt of eth/erc20 tokens, user can specify a defi_relayer , which will send the eth/erc20 to defi_relayer and logging the user's information. See more in defi relayer . If user does not want to use defi_relayer , fill it with zero address. For example, burn(cusdt_address, 1e18, 1e16, user_eth_addr, zero_addr) will burn 1 cUSDT and user is willing to pay no more than 0.01 cUSDT as burn fee to sponsor. The burned usdt will directly sent to user_eth_addr.","title":"Token base"},{"location":"shuttleflow/token_base/#tokenbase","text":"TokenBase is the cross chain token contract (cToken). It follows ERC777 standard except burn function. Owership and autorities: * Owner of cToken is initially who deployed it (Conflux admin), then its owner will transfer the ownership to CustodianCore contract. Only owner of the contract is able to mint cToken. * Only pausers are able to pause/unpause the cToken contract. Initially, the pauser of cToken is Conflux admin, the pauser can add other pausers. Core Functions: TokenBase implements the functions of ERC777 standard, with a different mint and burn function: function mint( address account, // user conflux address uint256 amount, // user mint amount address fee_address, // sponsor of the token uint256 fee, // mint fee, or mint fee + receive wallet fee address defi, // conflux defi string memory tx_id // cross chain transaction hash ) public; Owner authority required. Mint tokens for user and mint tokens for token sponsor as fee. function burn( address user_addr, // user conflux address uint256 amount, // burn amount uint256 expected_fee, // expected burn fee, in 18 decimals string memory addr, // external chain receive address address defi_relayer // external chain defi relayer address ) public; Burn cToken from sender's address. user_addr is used to logging, in case Conflux Defi burn cToken for normal user. amount should be larger than burn_fee and minimal_burn_value in CustodianCore contract(Note here the decimals of amount is 18 and decimals of burn_fee and minimal_burn_value in CustoidanCore contract is reference token's decimal, the smart contract will do the decimal conversion for comparison). Besides, if the fee is higher than expected_fee , the burn transaction will revert. addr is a ethereum or bitcoin address, which the reference token will be sent to. If it is a burnt of eth/erc20 tokens, user can specify a defi_relayer , which will send the eth/erc20 to defi_relayer and logging the user's information. See more in defi relayer . If user does not want to use defi_relayer , fill it with zero address. For example, burn(cusdt_address, 1e18, 1e16, user_eth_addr, zero_addr) will burn 1 cUSDT and user is willing to pay no more than 0.01 cUSDT as burn fee to sponsor. The burned usdt will directly sent to user_eth_addr.","title":"TokenBase"},{"location":"shuttleflow/token_sponsor/","text":"TokenSponsor TokenSponsor is the contract to manage sponsor information of cross chain tokens. Core Storage Variables mapping(string => address) token_sponsor; Mapping of reference token to its sponsor's conflux address. mapping(string => uint256) token_sponsor_value; Mapping of reference token to its remaining sponsored cETH value. uint256 public sponsor_replace_ratio; // per cent A percent ratio when a user want to replace the sponsor of a token t , he/she must mortgage more than token_sponsor_value[t]*(100+sponsor_replace_ratio)/100 cETH.","title":"Token sponsor"},{"location":"shuttleflow/token_sponsor/#tokensponsor","text":"TokenSponsor is the contract to manage sponsor information of cross chain tokens.","title":"TokenSponsor"},{"location":"shuttleflow/token_sponsor/#core-storage-variables","text":"mapping(string => address) token_sponsor; Mapping of reference token to its sponsor's conflux address. mapping(string => uint256) token_sponsor_value; Mapping of reference token to its remaining sponsored cETH value. uint256 public sponsor_replace_ratio; // per cent A percent ratio when a user want to replace the sponsor of a token t , he/she must mortgage more than token_sponsor_value[t]*(100+sponsor_replace_ratio)/100 cETH.","title":"Core Storage Variables"}]}